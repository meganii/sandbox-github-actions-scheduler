{
  "id": "639de5722a1dc1001d3c7644",
  "title": "GPT-3/ChatGPTでScrapboxの中身を元に回答を生成",
  "created": 1671292276,
  "updated": 1735425694,
  "lines": [
    {
      "id": "639de5722a1dc1001d3c7644",
      "text": "GPT-3/ChatGPTでScrapboxの中身を元に回答を生成",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671292276,
      "updated": 1671294765
    },
    {
      "id": "6421b80a79e1130000887b55",
      "text": "=> [Scrapbox ChatGPT Connector]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1679931403,
      "updated": 1679931407
    },
    {
      "id": "6421b80b79e1130000887b56",
      "text": "",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1679931403,
      "updated": 1679931403
    },
    {
      "id": "639de57379e11300005f0642",
      "text": "大規模言語モデルでScrapboxの中身を元に回答を生成したい[blu3mo.icon]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671292276,
      "updated": 1671292293
    },
    {
      "id": "639de58a79e11300005f0649",
      "text": "　>[https://twitter.com/nishio/status/1599655143578173440 @nishio]: 例えば著書がたくさんある人やScrapboxで1万ページ超えてるような人を読み込ませて仮想人格としてチャットに召喚しインタラクティブに議論をすることができ(たらいいな)",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671292299,
      "updated": 1671292300
    },
    {
      "id": "639de58c79e11300005f064a",
      "text": " 　これをしたい[blu3mo.icon*2][はるひ.icon*2][nishio.icon*2][tkgshn.icon][wogikaze.icon][sta.icon*2]",
      "userId": "616ca537c25a92001e5f1e0d",
      "created": 1671292300,
      "updated": 1673936960
    },
    {
      "id": "63c6403f79d3a90000520dc3",
      "text": " 　\t期待している。こういう用途のために自分のスクボを太らせてきた……[sta.icon]",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1673936961,
      "updated": 1673936985
    },
    {
      "id": "639de57379e11300005f0643",
      "text": " 質問したらドキュメントを元に回答を生成するようなやつ",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671292276,
      "updated": 1671292278
    },
    {
      "id": "639de57379e11300005f0645",
      "text": "　これをやれば良さそう[blu3mo.icon]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671292276,
      "updated": 1671292308
    },
    {
      "id": "639de59879e11300005f064e",
      "text": "   [- GPT-3のAnswer APIがあるのね]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671292312,
      "updated": 1671295444
    },
    {
      "id": "639df1d579e1130000d161de",
      "text": "    https://towardsdatascience.com/application-of-gpt-3-in-q-a-769239a01f6d",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671295445,
      "updated": 1671295445
    },
    {
      "id": "639df1d079e1130000d161dd",
      "text": "    https://beta.openai.com/docs/guides/answers",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671295441,
      "updated": 1671295442
    },
    {
      "id": "639de63879e11300005f064f",
      "text": "   つい最近Deprecatedになってた",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671292472,
      "updated": 1671293919
    },
    {
      "id": "639debdf79e11300005f0650",
      "text": "    https://help.openai.com/en/articles/6233728-answers-transition-guide#h_89196129b2",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671293921,
      "updated": 1671293921
    },
    {
      "id": "639debe079e11300005f0651",
      "text": "   先にvector-based embedding search（たぶん[Operand]みたいな[Semantic Search]?）で関連度高いドキュメントを見つけた上で、それらを放り込んで質問の回答を生成する方法を推奨している",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671293921,
      "updated": 1671296721
    },
    {
      "id": "639dec1079e11300005f0652",
      "text": "    せっかくScrapboxはリンク情報があるので、それも使って与える情報を増やせると良さそう",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1671293969,
      "updated": 1671295455
    },
    {
      "id": "639defa679e11300005f0663",
      "text": "　[Semantic Search]は必須のコンポーネントではないと思っている[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1671294886,
      "updated": 1671296486
    },
    {
      "id": "639df5e6aff09e0000aafbf4",
      "text": "　 たとえば「X」ってキーワードを入れた時に「Xについて、下記の文章を参考に簡潔な説明をしてください。(ここにScrapboxをXで検索した結果が入る)」というプロンプトを生成するのでもそれなりに成立すると思う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1671296486,
      "updated": 1671296577
    },
    {
      "id": "639df641aff09e0000aafbf5",
      "text": "　 で、この場合の問題は「(ここにScrapboxをXで検索した結果が入る)」の部分が大きくなりすぎると、それに応じてコストも上がること。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1671296578,
      "updated": 1671296615
    },
    {
      "id": "639df666aff09e0000aafbf6",
      "text": "　 　なので「キーワードXを含むすべて」ではなく、距離の近い方から選ぶ類似度ベースの[手法]の方が都合がいいのだと思う",
      "userId": "5b5e7121417cf700145b98c2",
      "created": 1671296615,
      "updated": 1674477890
    },
    {
      "id": "639df5c5aff09e0000aafbf3",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1671296453,
      "updated": 1671296453
    },
    {
      "id": "63c2b09e79e113000074bc48",
      "text": "https://github.com/jerryjliu/gpt_index",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1673703583,
      "updated": 1673703585
    },
    {
      "id": "63c2b0a179e113000074bc4a",
      "text": "　これ使えば楽そ[blu3mo.icon]う",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1673703585,
      "updated": 1673703728
    },
    {
      "id": "63c2b0a079e113000074bc49",
      "text": "　どうやって使うんだろう[yosider.icon]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673703585,
      "updated": 1673709443
    },
    {
      "id": "63c2c7f8e5172d00003790be",
      "text": "　 [https://gpt-index.readthedocs.io/en/latest/getting_started/starter_example.html Starter Tutorial — GPT Index documentation]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709560,
      "updated": 1673709563
    },
    {
      "id": "63c2c783e5172d000037909b",
      "text": "　　> Build and Query Index",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709443,
      "updated": 1673709450
    },
    {
      "id": "63c2c789e5172d00003790a8",
      "text": "  > Create a new .py file with the following:",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709450,
      "updated": 1673709450
    },
    {
      "id": "63c2c789e5172d00003790a9",
      "text": "  code:py",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709450,
      "updated": 1673709495
    },
    {
      "id": "63c2c7aee5172d00003790b9",
      "text": "\t\t from gpt_index import GPTSimpleVectorIndex, SimpleDirectoryReader",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709487,
      "updated": 1673709487
    },
    {
      "id": "63c2c7afe5172d00003790ba",
      "text": "   from IPython.display import Markdown, display",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709487,
      "updated": 1673709487
    },
    {
      "id": "63c2c7afe5172d00003790bb",
      "text": "   ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709487,
      "updated": 1673709487
    },
    {
      "id": "63c2c7afe5172d00003790bc",
      "text": "   documents = SimpleDirectoryReader('data').load_data()",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709487,
      "updated": 1673709487
    },
    {
      "id": "63c2c7afe5172d00003790bd",
      "text": "   index = GPTSimpleVectorIndex(documents)",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709487,
      "updated": 1673709487
    },
    {
      "id": "63c2c789e5172d00003790af",
      "text": "  > This builds an index over the documents in the `data` folder (which in this case just consists of the essay text). We then run the following",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709450,
      "updated": 1673709506
    },
    {
      "id": "63c2c789e5172d00003790b0",
      "text": "  code:py",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709450,
      "updated": 1673709517
    },
    {
      "id": "63c2c789e5172d00003790b1",
      "text": "   response = index.query(\"What did the author do growing up?\")",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709450,
      "updated": 1673709520
    },
    {
      "id": "63c2c789e5172d00003790b2",
      "text": "   print(response)",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709450,
      "updated": 1673709521
    },
    {
      "id": "63c2c789e5172d00003790b3",
      "text": "  > You should get back a response similar to the following: `The author wrote short stories and tried to program on an IBM 1401.`",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709450,
      "updated": 1673709527
    },
    {
      "id": "63c2c806e5172d00003790c0",
      "text": "  ふむ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709575,
      "updated": 1673709579
    },
    {
      "id": "63c2c80ce5172d00003790c1",
      "text": "  jsonそのまま突っ込むのはさすがに無理？",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1673709580,
      "updated": 1673709605
    },
    {
      "id": "63c2c77be5172d000037909a",
      "text": ">[https://twitter.com/umiyuki_ai/status/1614053783834877954 @umiyuki_ai]: セコイアが記事書いてた数ヶ月前の時点では「専門的な知識をGPT-3に与えるには、メッチャ金と時間かけてファインチューニングしなきゃ！ああ大変だ、大変だ」って感じだったのが、最近では「与えたい知識の文書を埋め込みでベクターデータベース化して[LangChain]かGPTIndexですぐできますよ！簡単！」",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1673709436,
      "updated": 1673720735
    },
    {
      "id": "63c2f39779e1130000709344",
      "text": "",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1673720727,
      "updated": 1673720727
    },
    {
      "id": "63f5079e79e113000057274c",
      "text": " 多分これができれば、質疑応答以上に発展的なことも出来ると思う[blu3mo.icon]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1677002655,
      "updated": 1677002674
    },
    {
      "id": "63f507b179e113000057274f",
      "text": " 　Scrapboxに突っ込んであるXの話を元にYを書いて、とか",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1677002674,
      "updated": 1677002703
    },
    {
      "id": "63f507d479e1130000572752",
      "text": "  [Mem]で出来ているようなことをやりたい[blu3mo.icon*2]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1677002709,
      "updated": 1677002716
    },
    {
      "id": "63f5079e79e113000057274d",
      "text": "",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1677002655,
      "updated": 1677002655
    },
    {
      "id": "63c2f39479e1130000709343",
      "text": " [GPTIndexにScrapboxの内容を突っ込んで遊ぶ]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1673720725,
      "updated": 1673936789
    },
    {
      "id": "63ee57b579e11300003c0a1c",
      "text": " [Bing AIで特定のScrapboxの内容を元に質問に回答]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1676564407,
      "updated": 1676564413
    },
    {
      "id": "63ee57b679e11300003c0a1d",
      "text": " [2023/2/21 Scrapboxの内容を元にしたチャットbotを実装する]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1676564407,
      "updated": 1677002802
    },
    {
      "id": "63f507dd79e1130000572753",
      "text": "",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1677002719,
      "updated": 1677002719
    },
    {
      "id": "67707cfb79e1130000109a89",
      "text": "2024/12/29",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1735425276,
      "updated": 1735425276
    },
    {
      "id": "67707cf579e1130000109a87",
      "text": " 懐かしいな[blu3mo.icon]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1735425270,
      "updated": 1735425273
    },
    {
      "id": "67707cf579e1130000109a88",
      "text": " GPTが出た直後の祭り",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1735425270,
      "updated": 1735425682
    },
    {
      "id": "67707d1379e1130000109a8b",
      "text": " 　もう2年前か〜",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1735425300,
      "updated": 1735425303
    },
    {
      "id": "67707e9279e1130000109a8c",
      "text": " 　この祭りテンションが今でも続いているのが面白い",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1735425683,
      "updated": 1735425694
    },
    {
      "id": "67707cfd79e1130000109a8a",
      "text": "",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1735425278,
      "updated": 1735425278
    }
  ]
}