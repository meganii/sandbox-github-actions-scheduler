{
  "id": "615c34683fb19f001de75e47",
  "title": "reduceとflatとmap",
  "created": 1633432681,
  "updated": 1649063184,
  "lines": [
    {
      "id": "615c34683fb19f001de75e47",
      "text": "reduceとflatとmap",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091beb5",
      "text": "from [@takker]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091beb7",
      "text": "少し前のメモなので、もうご存知かもしれませんが、見かけたので[mrsekut.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091beb8",
      "text": "\t以下の2つの文章はちょっと違和感あります",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091beb9",
      "text": " \t[/takker/filterとmapをひとまとめにする#601cc8671280f0000093b72e]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091beba",
      "text": " \t[/takker/Array.prototype.flatMap()#5f62c9b41280f00000afcd91]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bebb",
      "text": "\t[wandbox https://wandbox.org/permlink/UJDT5xbnkXcsckcM]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bebc",
      "text": "\t[flatMap]は、mapしてflatしたものに相当します",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1649063184
    },
    {
      "id": "615c34691280f0000091bebd",
      "text": "\t\tcode:js",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bebe",
      "text": "\t\t // flatの例",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bebf",
      "text": "   const a = [[1],[2,3],4].flat()",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec0",
      "text": "   console.log(a);  // [1,2,3,4]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec1",
      "text": "  code:js",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec2",
      "text": "   const arr = [1,2,3,4,5];",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec3",
      "text": "   ",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec4",
      "text": "   // map + flat",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec5",
      "text": "   const f = n => [n*10]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec6",
      "text": "   const b1 = arr.map(f)     // [[10], [20], [30], [40], [50]]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec7",
      "text": "                 .flat()     // [10,20,30,40,50]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec8",
      "text": "   ",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bec9",
      "text": "   // flatMap",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091beca",
      "text": "   const b2 = arr.flatMap(f) // [10,20,30,40,50]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091becb",
      "text": "  だから「filterとmapを1つに」ではなく、「flatとmapを1つに」な気がします",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091becc",
      "text": "  あ、このページでやりたかったのは`map().flat()`ではなく`filter().map()`です[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091becd",
      "text": "   説明が足りなすぎたので追記しました",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bece",
      "text": "\tまたreduceは、mapやfilterよりも抽象度の高いもので、",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091becf",
      "text": "\t\tその証拠にreduceを使うとmapやfilterを再実装できます",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed0",
      "text": "\t\tcode:js",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed1",
      "text": "\t\t const arr = [0,1,2,3,4,5,6,7,8,9,];",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed2",
      "text": "   // map相当",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed3",
      "text": "   const map = (arr, f) => arr.reduce((acc, cur) => acc.concat(f(cur)), [])",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed4",
      "text": "   console.log(map(arr, n => n*10))",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed5",
      "text": "   ",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed6",
      "text": "   // filter相当",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed7",
      "text": "   const filter = (arr, f) => arr.reduce((acc, cur) => f(cur) ? acc.concat(cur) : acc , [])",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed8",
      "text": "   console.log(filter(arr, n => n > 3))",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bed9",
      "text": "  ",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091beda",
      "text": " \t\tすごい[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bedb",
      "text": " \t\t 正直、[Array.prototype.reduce()]の抽象度が高すぎるせいか、あまり理解できていなんですよね……",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bedc",
      "text": " \t\t  なのでいつもflatmapでなんとか乗り切っていました",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bedd",
      "text": " \t\t 最近reduceを使わないと解決できない場面がちょくちょくあったので、以前よりは理解度上がっているかも……？",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bede",
      "text": "  だから「reduceとmapの組み合わせ」という文章に違和感があります",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bedf",
      "text": "   これはreduceの役割を勘違いしていたのが原因でした[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bee0",
      "text": "    [/takker/Array.prototype.flatMap()#613568b61280f0000030233a]に追記しました",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c5758385a9200007ff790",
      "text": "    でも狭義にはreduceって足し上げとか、配列上の全要素を舐めて得られる情報を抽出する、と自分は読むな[miyamonz.icon]",
      "userId": "5953adab7aa58a0011385a92",
      "created": 1633441624,
      "updated": 1633441679
    },
    {
      "id": "615c34691280f0000091bee1",
      "text": "\t\tHaskell界隈(?)では、こういうのを「[畳み込み]」と呼んでて1つの面白いトピックになってたりします[mrsekut.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bee2",
      "text": "\t\t 畳み込み、面白そうですね。今度調べてみます[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bee3",
      "text": "\t\t  [template meta programming]の文脈で出会ったことがあるような気もする……あれも畳み込みだったのかな",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c6e6c4bb2e200003ac814",
      "text": "\t\t連結リストを扱える言語を触っていると`reduce`や`fold`で`map`や`reverse`の[- シミュレート]実装が簡単にできて面白い[kuuote.icon]",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1633447513,
      "updated": 1633447592
    },
    {
      "id": "615c6ed84bb2e200003ac815",
      "text": "\t\t 配列を舐めて畳むという動作が綺麗に抽象化されていて感動する(個人の感想)",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1633447620,
      "updated": 1633447641
    },
    {
      "id": "615c7423198270000071738f",
      "text": "\t\t foldでいくつか再実装してるノートあった[mrsekut.icon]",
      "userId": "5b4ea932de544f0014198270",
      "created": 1633448996,
      "updated": 1633449006
    },
    {
      "id": "615c742c1982700000717390",
      "text": "\t\t \t[/mrsekut-p/fold/unfoldの練習]",
      "userId": "5b4ea932de544f0014198270",
      "created": 1633449004,
      "updated": 1633449005
    },
    {
      "id": "615c34691280f0000091bee4",
      "text": " サンプルコードまで書いていただきありがとうございます！[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    },
    {
      "id": "615c34691280f0000091bee5",
      "text": " 　元ページの方に修正を加えておきました",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1633432681,
      "updated": 1633432681
    }
  ]
}