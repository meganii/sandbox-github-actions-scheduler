{
  "id": "63ba2cbd6b30e8001ef06071",
  "title": "プログラミングの解説",
  "created": 1673145574,
  "updated": 1673507501,
  "lines": [
    {
      "id": "63ba2cbd6b30e8001ef06071",
      "text": "プログラミングの解説",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145574,
      "updated": 1673145575
    },
    {
      "id": "63ba2cc5aff09e0000a2a4c7",
      "text": "どういう内容があるといいのかを考える[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145575,
      "updated": 1673145575
    },
    {
      "id": "63ba2cd8aff09e0000a2a4c9",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145575,
      "updated": 1673145575
    },
    {
      "id": "63ba2ce3aff09e0000a2a4ca",
      "text": "今[コーディングを支える技術]に書いてあるものからの差分",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145575,
      "updated": 1673145594
    },
    {
      "id": "63ba2cd0aff09e0000a2a4c8",
      "text": "　構造的型付けについて",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145575,
      "updated": 1673145605
    },
    {
      "id": "63ba2dc2aff09e0000a2a4d0",
      "text": "　　[/nishio/「名前的型システムと構造的型システムの違い」加筆案]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145820,
      "updated": 1673145820
    },
    {
      "id": "63ba2d04aff09e0000a2a4cc",
      "text": "　文字のエンコーディングについて、書記素や異体字セレクタ、結合絵文字の話",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145605,
      "updated": 1673145649
    },
    {
      "id": "63bfa1bfaff09e00000c7bbe",
      "text": "　　　",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503167,
      "updated": 1673503170
    },
    {
      "id": "63ba2d31aff09e0000a2a4cd",
      "text": "　物事をスコアで表現するロジック",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145650,
      "updated": 1673145683
    },
    {
      "id": "63ba2d53aff09e0000a2a4ce",
      "text": "　　これの延長線上にいわゆるAIがあるわけで今後のプログラミングにおいてそれを無視することはできない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145684,
      "updated": 1673145724
    },
    {
      "id": "63ba2d7eaff09e0000a2a4cf",
      "text": "　　[/nishio/if文から機械学習への道]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145726,
      "updated": 1673145765
    },
    {
      "id": "63ba2cfbaff09e0000a2a4cb",
      "text": "　　学習済みモデルを部品として使うことが行われるようになっていく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145595,
      "updated": 1673145964
    },
    {
      "id": "63ba2e6caff09e0000a2a4d8",
      "text": "　　　今までのプログラミングにおける「確実に正しいものを積み上げていくことで正しいプログラムを作る」というアプローチが機能しなくなる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145965,
      "updated": 1673146000
    },
    {
      "id": "63ba2e90aff09e0000a2a4d9",
      "text": "　　　「人」と同様の「間違いうる部品」",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673146001,
      "updated": 1673146028
    },
    {
      "id": "63ba4406774b170000f1042b",
      "text": "　　　 システム全体としては今までもユーザーという間違いが起こる場所があるのでエラー処理を入れていた？[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1673151495,
      "updated": 1673151514
    },
    {
      "id": "63bf9ff4aff09e00000c7bac",
      "text": "　　　 そう[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502708,
      "updated": 1673502715
    },
    {
      "id": "63bf9ffbaff09e00000c7bad",
      "text": "　　　 　単体テストなどの方法で「間違っていない部品」を作り、それを組み合わせることによって「間違っていないプログラム」を作ろうという思想が一時期あった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502715,
      "updated": 1673502778
    },
    {
      "id": "63bfa039aff09e00000c7bae",
      "text": "　　　 　「間違いうる部品」は当初は軽視されるが、その部品の質が上がっていくことによって「使わないわけにはいかない」状況が生まれる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502778,
      "updated": 1673502827
    },
    {
      "id": "63bfa06aaff09e00000c7baf",
      "text": "　　　 　これは「単体テスト」的な思想を根底から揺さぶる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502827,
      "updated": 1673502860
    },
    {
      "id": "63bfa08caff09e00000c7bb0",
      "text": "　　　 　　古い思想を開発プロセスと密結合にしてしまってる組織は適応が遅れるだろう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502860,
      "updated": 1673502884
    },
    {
      "id": "63bfa0a4aff09e00000c7bb1",
      "text": "　　　 　この種の「間違いうる部品」は何もAIに限ったことではない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502885,
      "updated": 1673502901
    },
    {
      "id": "63bfa0b6aff09e00000c7bb2",
      "text": "　　　 　　例えば外部のAPIを叩くプログラムは、呼び出しが失敗しうる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502903,
      "updated": 1673502936
    },
    {
      "id": "63bfa0dbaff09e00000c7bb3",
      "text": "　　　 　　失敗したことを検知して、その場合にどうするかを実装する必要がある、リトライするのか、フォールバックするのか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502939,
      "updated": 1673502969
    },
    {
      "id": "63bfa0f9aff09e00000c7bb4",
      "text": "　　　 　",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673502969,
      "updated": 1673502969
    },
    {
      "id": "63ba2ddeaff09e0000a2a4d2",
      "text": "　UIのコンポーネントを表現する手法としてのオブジェクト指向から脱却する動きについて",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145822,
      "updated": 1673145856
    },
    {
      "id": "63ba2dffaff09e0000a2a4d4",
      "text": "　　Reactの関数コンポーネントの話",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145856,
      "updated": 1673145867
    },
    {
      "id": "63ba2e13aff09e0000a2a4d5",
      "text": "　　イミュータブルパターンとの関連",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145876,
      "updated": 1673145893
    },
    {
      "id": "63ba2e25aff09e0000a2a4d6",
      "text": "　　古いオブジェクト指向において「状態の管理」はオブジェクトと抱き合わせになっていた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145893,
      "updated": 1673145917
    },
    {
      "id": "63bfa119aff09e00000c7bb5",
      "text": "　　本質的には関数に状態を渡して更新することと変わらない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503001,
      "updated": 1673503024
    },
    {
      "id": "63bfa130aff09e00000c7bb6",
      "text": "　　　遅延評価のあるHaskellなどの話",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503024,
      "updated": 1673503042
    },
    {
      "id": "63bfa141aff09e00000c7bb7",
      "text": "　　　この関数の管理が面倒なのでオブジェクトの名前空間に入れようと考えた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503042,
      "updated": 1673503060
    },
    {
      "id": "63bfa154aff09e00000c7bb8",
      "text": "　　　　これはIDEが貧弱だったから",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503060,
      "updated": 1673503068
    },
    {
      "id": "63bfa15daff09e00000c7bb9",
      "text": "　　　　型の情報を元にサジェスト",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503069,
      "updated": 1673503096
    },
    {
      "id": "63bfa178aff09e00000c7bba",
      "text": "　　　そもそも階層的分類が上手くいくだろうが",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503097,
      "updated": 1673503110
    },
    {
      "id": "63bfa185aff09e00000c7bbb",
      "text": "　　　　単一継承の問題と、ミックスインの話を書いた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503110,
      "updated": 1673503125
    },
    {
      "id": "63bfa1a4aff09e00000c7bbd",
      "text": "　　　　階層的な名前空間で整理しようとするのも似た感じ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503141,
      "updated": 1673503162
    },
    {
      "id": "63bfa195aff09e00000c7bbc",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673503126,
      "updated": 1673503137
    },
    {
      "id": "63ba2f22aff09e0000a2a4db",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673146147,
      "updated": 1673146162
    },
    {
      "id": "63ba2e3daff09e0000a2a4d7",
      "text": "Rustの所有権の概念",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145917,
      "updated": 1673506060
    },
    {
      "id": "63bfad0baff09e00000c7bc7",
      "text": "　move",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506060,
      "updated": 1673506063
    },
    {
      "id": "63bfad0eaff09e00000c7bc8",
      "text": "　これはスコープの章に追加だと思う",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506063,
      "updated": 1673506077
    },
    {
      "id": "63bfad1daff09e00000c7bc9",
      "text": "　参照カウンターの話、書いてたかな？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506077,
      "updated": 1673506128
    },
    {
      "id": "63bfad50aff09e00000c7bca",
      "text": "　二重フリーの問題",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506128,
      "updated": 1673506144
    },
    {
      "id": "63bfad61aff09e00000c7bcb",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506145,
      "updated": 1673506147
    },
    {
      "id": "63bfad63aff09e00000c7bcc",
      "text": "文字列の章",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506148,
      "updated": 1673506152
    },
    {
      "id": "63bfad68aff09e00000c7bcd",
      "text": "　単に加筆するというより、再構成が必要そう",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506152,
      "updated": 1673506168
    },
    {
      "id": "63bfad78aff09e00000c7bce",
      "text": "　",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506168,
      "updated": 1673506168
    },
    {
      "id": "63ba2ddeaff09e0000a2a4d3",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673145822,
      "updated": 1673145822
    },
    {
      "id": "63bfada4aff09e00000c7bcf",
      "text": "初版2013年",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506213,
      "updated": 1673506219
    },
    {
      "id": "63bfadadaff09e00000c7bd1",
      "text": "　陳腐化しにくい、長持ちする技術書を作るぞ、というモチベーションで作られた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506221,
      "updated": 1673506278
    },
    {
      "id": "63bfade6aff09e00000c7bd2",
      "text": "　それから10年経った",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506278,
      "updated": 1673506290
    },
    {
      "id": "63bfadf2aff09e00000c7bd4",
      "text": "　　答え合わせの時期だ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506290,
      "updated": 1673506295
    },
    {
      "id": "63bfadf8aff09e00000c7bd5",
      "text": "　学び方や知識の構造化の方法や、この本を作るという「知的生産」がどのように行われたのかに関しては2018？年の「エンジニアの知的生産術」に書いた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506296,
      "updated": 1673506418
    },
    {
      "id": "63bfae97aff09e00000c7bd6",
      "text": "　1〜5章に関して特になし",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506455,
      "updated": 1673506682
    },
    {
      "id": "63bfaf7aaff09e00000c7bd7",
      "text": "　6章エラー処理",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506682,
      "updated": 1673506691
    },
    {
      "id": "63bfafbaaff09e00000c7bd9",
      "text": "　　ユーザの手元で起こったエラーの情報を収集することが行われるようになった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506747,
      "updated": 1673506762
    },
    {
      "id": "63bfafceaff09e00000c7bda",
      "text": "　　ブラウザ上で起きたエラーを自動でクラウドサービスに送信するなど",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506767,
      "updated": 1673506795
    },
    {
      "id": "63bfafebaff09e00000c7bdb",
      "text": "　　特にスマートホンの普及によって",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506795,
      "updated": 1673506796
    },
    {
      "id": "63bfafeeaff09e00000c7bdc",
      "text": "　　あと、インターネットへの常時接続を仮定できるようになった時代の変化",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506798,
      "updated": 1673506817
    },
    {
      "id": "63bfb001aff09e00000c7bdd",
      "text": "　7章名前とスコープ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506817,
      "updated": 1673506825
    },
    {
      "id": "63bfb009aff09e00000c7bde",
      "text": "　　Rustの所有権の概念が話題に",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506826,
      "updated": 1673506836
    },
    {
      "id": "63bfb023aff09e00000c7bdf",
      "text": "　8章　型",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506851,
      "updated": 1673506864
    },
    {
      "id": "63bfb02baff09e00000c7be0",
      "text": "　　構造的型付け",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506859,
      "updated": 1673506906
    },
    {
      "id": "63bfb05daff09e00000c7be1",
      "text": "　　　概念自体は昔からあった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506909,
      "updated": 1673506916
    },
    {
      "id": "63bfb06baff09e00000c7be2",
      "text": "　　　JavaScriptに対する代替スクリプトとして多様な言語が競い合った結果、TypeScriptが注目を集めるようになった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506924,
      "updated": 1673506966
    },
    {
      "id": "63bfb097aff09e00000c7be3",
      "text": "　　　ここで「構造的型付け」を理解することの必要性が多くのプログラマにとって必要な課題になった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506967,
      "updated": 1673506991
    },
    {
      "id": "63bfb0afaff09e00000c7be4",
      "text": "　　　よく知られているJavaなどの形をイメージしていると混乱する",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506991,
      "updated": 1673507010
    },
    {
      "id": "63bfb0c4aff09e00000c7be5",
      "text": "　9章　文字列",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507013,
      "updated": 1673507021
    },
    {
      "id": "63bfb0ceaff09e00000c7be6",
      "text": "　　Unicodeはしゃぎすぎ問題",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507022,
      "updated": 1673507052
    },
    {
      "id": "63bfb0f2aff09e00000c7be7",
      "text": "　　絵文字",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507059,
      "updated": 1673507061
    },
    {
      "id": "63bfada8aff09e00000c7bd0",
      "text": "　10章　並行処理",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673506217,
      "updated": 1673507141
    },
    {
      "id": "63bfb145aff09e00000c7be9",
      "text": "　　ブラウザがシングルスレッドであったことによってJavaScriptなどでは協調的マルチタスクが必然だった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507142,
      "updated": 1673507188
    },
    {
      "id": "63bfb175aff09e00000c7bea",
      "text": "　　Promiseの概念、async awaitなど、協調的マルチタスクをきれいに書くための道具が整備されていった",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507189,
      "updated": 1673507236
    },
    {
      "id": "63bfb1a5aff09e00000c7beb",
      "text": "　　サーバサイドでのNode.jsなども同じような書き方が可能に",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507237,
      "updated": 1673507318
    },
    {
      "id": "63bfb1f6aff09e00000c7bec",
      "text": "　　一方でブラウザの側にはwebworkerという形でスレッドを増やす仕組みが…",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507318,
      "updated": 1673507353
    },
    {
      "id": "63bfb219aff09e00000c7bed",
      "text": "　11章　オブジェクトとクラス",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507354,
      "updated": 1673507369
    },
    {
      "id": "63bfb237aff09e00000c7bee",
      "text": "　　変数と関数をたばねる方法1〜4",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507383,
      "updated": 1673507501
    },
    {
      "id": "63bfb25aaff09e00000c7bef",
      "text": "　　新たな動き",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507418,
      "updated": 1673507423
    },
    {
      "id": "63bfb25faff09e00000c7bf0",
      "text": "　　更新される値である「状態」と、それを扱う「関数」を束ねる必要があるか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507423,
      "updated": 1673507462
    },
    {
      "id": "63bfb286aff09e00000c7bf1",
      "text": "　　　むしろ束ねない方がメリットがある、という考え",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507462,
      "updated": 1673507474
    },
    {
      "id": "63bfb293aff09e00000c7bf2",
      "text": "　　　これがReactの関数コンポーネントの概念に繋がっていく",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507475,
      "updated": 1673507490
    },
    {
      "id": "63bfb13eaff09e00000c7be8",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1673507134,
      "updated": 1673507134
    }
  ]
}