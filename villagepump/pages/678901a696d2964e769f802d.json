{
  "id": "678901a696d2964e769f802d",
  "title": "リンクリスト",
  "created": 1737032127,
  "updated": 1737032186,
  "lines": [
    {
      "id": "678901a696d2964e769f802d",
      "text": "リンクリスト",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737032127,
      "updated": 1737032127
    },
    {
      "id": "678901c371b3c20000cfc391",
      "text": "https://ja.wikipedia.org/wiki/連結リスト",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737032132,
      "updated": 1737032132
    },
    {
      "id": "678901be71b3c20000cfc38d",
      "text": ">[連結]リスト（、英語: Linked list）は、最も基本的なデータ構造の1つであり、他の[データ構造]の実装に使われる。リンクリスト、リンクトリストとも表記される。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737032127,
      "updated": 1737032145
    },
    {
      "id": "678901bf71b3c20000cfc38f",
      "text": "> 一連のノードが、任意のデータフィールド群を持ち、1つか2つの参照（[リンク]）により次（および前）のノードを指している。連結リストの主な利点は、リスト上のノードを様々な順番で検索可能な点である。連結リストは自己参照型のデータ型であり、同じデータ型の別のノードへのリンク（またはポインタ）を含んでいる。連結リストは場所が分かっていれば、ノードの挿入や削除を定数時間で行うことができる（場所を探すのにかかる時間はリスト上の順番の条件などにも依存するし、後述する片方向リストなのか双方向リストなのかにも依存する）。連結リストにはいくつかの種類があり、片方向リスト、双方向リスト、線形リスト、循環リストなどがある。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737032127,
      "updated": 1737032156
    },
    {
      "id": "678901bf71b3c20000cfc390",
      "text": "> 連結リストは多くのプログラミング言語で実装可能である。[LISP] や Scheme 、Prologといった言語は組み込みでこのデータ構造を持っていて、連結リストにアクセスするための操作も組み込まれている。 ",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737032127,
      "updated": 1737032186
    },
    {
      "id": "678901bf71b3c20000cfc38e",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737032127,
      "updated": 1737032179
    },
    {
      "id": "678901e271b3c20000cfc393",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737032163,
      "updated": 1737032163
    }
  ]
}