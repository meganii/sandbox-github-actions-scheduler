{
  "id": "6146921b9bafed0020e4cdc1",
  "title": "CSPを突破するnode-bitmap-proxyの原理を説明し",
  "created": 1632014877,
  "updated": 1633770234,
  "lines": [
    {
      "id": "6146921b9bafed0020e4cdc1",
      "text": "CSPを突破するnode-bitmap-proxyの原理を説明し",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632014877,
      "updated": 1632014877
    },
    {
      "id": "6146921c6668720000c3925e",
      "text": "たい[yuki_minoh.icon]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632014877,
      "updated": 1632014881
    },
    {
      "id": "615d816566687200002de40c",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633517928,
      "updated": 1633517928
    },
    {
      "id": "615d816566687200002de40d",
      "text": "[node-bitmap-proxy]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633517929,
      "updated": 1633517932
    },
    {
      "id": "614692216668720000c39260",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632014881,
      "updated": 1632014881
    },
    {
      "id": "614692226668720000c39261",
      "text": "[yuki_minoh.icon]が実装しているサービス？の説明をします",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632014882,
      "updated": 1632014919
    },
    {
      "id": "614692426668720000c39263",
      "text": "　[- と思ったが[/public-minaph/node-bitmap-proxyの安全性について]ですでに書いていたのでそっちをみてもらったほうが早いかも]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632014914,
      "updated": 1633770182
    },
    {
      "id": "615d816c66687200002de40e",
      "text": "　 全然明確な書き方になってなくて完全にメモなのでちょっとアレです[yuki_minoh.icon]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633517935,
      "updated": 1633517957
    },
    {
      "id": "61615ada6668720000eeae7b",
      "text": "　 2021/10/9 17:42[yuki_minoh.icon]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633770202,
      "updated": 1633770203
    },
    {
      "id": "61615ada6668720000eeae7c",
      "text": "   [/js-fetch-proxy/ScrapboxのUserScriptは、なぜ外部リソースを読み込めな（い/かった）のか]でかなりわかりやすく説明できたっぽい",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633770203,
      "updated": 1633770203
    },
    {
      "id": "61615af5666872000063d783",
      "text": "   [/js-fetch-proxy/node-bitmap-proxy]とかもどうぞ",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633770229,
      "updated": 1633770234
    },
    {
      "id": "614692e96668720000c39266",
      "text": "　外部サーバーの準備は必要になりますが、送受信情報を全て画像に埋め込んでやり取りすることで、外部との通信がほぼなんでも可能になります",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015081,
      "updated": 1632015139
    },
    {
      "id": "6146946d6668720000c3926f",
      "text": "　　簡単にいうと、`https://my.proxy.server/url/https://target.url`みたいなsrcを画像に設定して、返ってきた画像から通信情報を読み出します",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015470,
      "updated": 1632015584
    },
    {
      "id": "614696096668720000c39270",
      "text": "　　ブラウザ→自前のサーバー→目的のサーバー→自前のサーバー（ここで画像にエンコード）→ブラウザ（画像から読み込み）",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015881,
      "updated": 1632015933
    },
    {
      "id": "6146b2751280f000004f1db3",
      "text": "　　データを画像に変換して通信するとは……[その発想はなかった][takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1632023158,
      "updated": 1632023184
    },
    {
      "id": "6146b4501280f000004f1dbc",
      "text": "　　 めちゃくちゃ強引だw",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1632023633,
      "updated": 1632023641
    },
    {
      "id": "6146b5f766687200001aaef8",
      "text": "　　 なんだかんだ他の形式でも通信できると思うんで、極言すればCSPの[connect-src https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src]の制約は、CSPの各項目の「最小の制約」と一致するんだと思います[yuki_minoh.icon]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632024057,
      "updated": 1632024546
    },
    {
      "id": "6146b7396668720000374668",
      "text": "　　 　今回は [https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Security-Policy/img-src img-src] がワイルドカード`*`指定なので、connect-srcも実質ワイルドカード制約",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632024377,
      "updated": 1632024518
    },
    {
      "id": "6146b8556668720000374669",
      "text": "　　 　実際CSSのコメント欄に情報を書き込んで送付とか普通にできそうだし、真実っぽい",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632024661,
      "updated": 1632024700
    },
    {
      "id": "6146bc056668720000374673",
      "text": "　　 　[/public-minaph/CSPのconnect-srcは、セキュリティとしてはほとんど意味がない]にちょっと書いた",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632025605,
      "updated": 1632025620
    },
    {
      "id": "614693386668720000c39267",
      "text": "　現状、SCPの突破自体はすでに実行できていて、あとは利便性の向上のためにtodoがいくつか",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015160,
      "updated": 1632015362
    },
    {
      "id": "6146935d6668720000c39268",
      "text": "　　API keyなどの秘匿情報をUserScriptに書けるようにする（事前に暗号化する仕組みを導入する）",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015198,
      "updated": 1632015373
    },
    {
      "id": "614693816668720000c39269",
      "text": "　　一連の通信を関数に包んで、使いやすくする",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015234,
      "updated": 1632015281
    },
    {
      "id": "614694456668720000c3926e",
      "text": "　　長いpostメッセージにも対応できるようにする",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015429,
      "updated": 1632015466
    },
    {
      "id": "614697026668720000c39278",
      "text": "　従来のブラウザ拡張機能を使ったやり方と比べると、「誰かがサーバーをセットアップさえすればみんな使える」という点が長所です",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632016131,
      "updated": 1632016321
    },
    {
      "id": "6146972a6668720000c39279",
      "text": "　　例えば「井戸端からのアクセスは許可」とかでサーバーをセットアップすればOK",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632016171,
      "updated": 1632016292
    },
    {
      "id": "614697a86668720000c3927a",
      "text": "　　スマホユーザーも恩恵を受けられます",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632016297,
      "updated": 1632016314
    },
    {
      "id": "614693d46668720000c3926a",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015317,
      "updated": 1632015318
    },
    {
      "id": "614693d66668720000c3926b",
      "text": "Scrapboxが画像のCSPを制限しない限りは、今後も有用なアプローチのはず。。。",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015319,
      "updated": 1632015378
    },
    {
      "id": "6146964b6668720000c39272",
      "text": "　ちなみに今僕[yuki_minoh.icon]がちょっと忙しいので、完成は少し先です",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015947,
      "updated": 1632015978
    },
    {
      "id": "614696fc6668720000c39277",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632016124,
      "updated": 1632016124
    },
    {
      "id": "614692e46668720000c39265",
      "text": "2021/10/06[yuki_minoh.icon]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632015076,
      "updated": 1633517508
    },
    {
      "id": "615d7f9a66687200002de404",
      "text": " 仕様の決定で迷うところがあったので、発展させて[js-fetch-proxy]というのを作り（提唱し？）ました",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633517469,
      "updated": 1633517600
    },
    {
      "id": "615d7fbd66687200002de405",
      "text": "  ブラウザでのリクエストを、プロキシサーバーで代理実行する、というコンセプトです",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633517505,
      "updated": 1633517558
    },
    {
      "id": "615d7ff366687200002de406",
      "text": "  画像通信は脇役にしちゃいました",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633517558,
      "updated": 1633517570
    },
    {
      "id": "6146921f6668720000c3925f",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1632014880,
      "updated": 1632014880
    }
  ]
}