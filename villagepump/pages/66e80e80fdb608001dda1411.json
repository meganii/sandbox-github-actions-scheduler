{
  "id": "66e80e80fdb608001dda1411",
  "title": "classとmodule、どちらを使うべき？(TypeScript)",
  "created": 1726484099,
  "updated": 1726563750,
  "lines": [
    {
      "id": "66e80e80fdb608001dda1411",
      "text": "classとmodule、どちらを使うべき？(TypeScript)",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726484099,
      "updated": 1726484120
    },
    {
      "id": "66e80ea17838e30000c446f7",
      "text": "[TypeScript]で[class]と[module]どちらを使うべきか迷う場面があったので、双方の利点を踏まえた上でclassとmoduleの有用な場面を考える[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726484121,
      "updated": 1726484227
    },
    {
      "id": "66e80eca7838e30000c446f9",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726484161,
      "updated": 1726484161
    },
    {
      "id": "66e80ead7838e30000c446f8",
      "text": "[** 前提]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726484133,
      "updated": 1726484230
    },
    {
      "id": "66e835007838e30000b2fb8f",
      "text": "\tclassかmoduleかに関わらず、常に合理的な記法を選択するものとする",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493944,
      "updated": 1726493971
    },
    {
      "id": "66e8351b7838e30000b2fb90",
      "text": "\t\t日常生活でまず使わないような回りくどい書き方は避ける",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493971,
      "updated": 1726493999
    },
    {
      "id": "66e80f107838e30000c446fb",
      "text": "\tJavaScriptのclassはスコープ周りの機能が貧弱なので、TypeScriptを基準として考える",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726484232,
      "updated": 1726484266
    },
    {
      "id": "66e80f327838e30000c446fc",
      "text": "\tここでのmoduleとは、ファイル単位で分割されたコードのことを指す",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726484266,
      "updated": 1726491682
    },
    {
      "id": "66e82eb87838e30000b2fb7c",
      "text": "\t関数の中に入れ子で関数を入れることや、[prototype]に何かしらを代入するのは今回禁止とする",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492336,
      "updated": 1726493703
    },
    {
      "id": "66e82ec87838e30000b2fb7d",
      "text": "\t\tアクセス修飾子の無い劣化版classのようなものなので、それをするならclassを選択すべきと考えるから",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492352,
      "updated": 1726492522
    },
    {
      "id": "66e892c871b3c200006a8e9f",
      "text": "\t\tごめんなさいやっちゃってます[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1726517960,
      "updated": 1726517968
    },
    {
      "id": "66e8f0331280f00000ea30b5",
      "text": "\t\tアクセス修飾子はclassでなくても[Object.defineProperty()](現代は[Reflect.defineProperty()]ほうがいいかも)で設定できます[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726541876,
      "updated": 1726541987
    },
    {
      "id": "66e8f0991280f00000ea30b6",
      "text": "\t\t 推奨はし難いですが……",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726541977,
      "updated": 1726542015
    },
    {
      "id": "66e82c2a7838e30000c446fd",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491682,
      "updated": 1726491682
    },
    {
      "id": "66e82c2a7838e30000c446fe",
      "text": "[** 双方の特徴]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491682,
      "updated": 1726491809
    },
    {
      "id": "66e82cc67838e30000b2fb6d",
      "text": "\t1. 複数の関数を実装する",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491838,
      "updated": 1726495114
    },
    {
      "id": "66e82cfd7838e30000b2fb6e",
      "text": "\t\tmodule: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491893,
      "updated": 1726491896
    },
    {
      "id": "66e82cfd7838e30000b2fb6f",
      "text": "\t\tclass: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491893,
      "updated": 1726491897
    },
    {
      "id": "66e82d6d7838e30000b2fb73",
      "text": "\t2. 関数や変数を外部から参照できるようにしたりできなくしたりする",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492005,
      "updated": 1726495115
    },
    {
      "id": "66e82dab7838e30000b2fb75",
      "text": "\t\tmodule: できる（参照可能なものにはexportをつける）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492067,
      "updated": 1726492082
    },
    {
      "id": "66e82dab7838e30000b2fb76",
      "text": "\t\tclass: できる（参照不可なものにはprotectedかprivateをつける）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492067,
      "updated": 1726492094
    },
    {
      "id": "66e82d017838e30000b2fb70",
      "text": "\t3. １つの変数（letかconst）をclass/module内の複数の関数から参照する",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491897,
      "updated": 1726495117
    },
    {
      "id": "66e82d647838e30000b2fb71",
      "text": "\t\tmodule: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491995,
      "updated": 1726492143
    },
    {
      "id": "66e82d647838e30000b2fb72",
      "text": "\t\tclass: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491995,
      "updated": 1726492001
    },
    {
      "id": "66e82dfb7838e30000b2fb78",
      "text": "\t4. 上記の変数の中に、呼び出し元ごとに別々の値を格納する（インスタンス化）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492146,
      "updated": 1726495118
    },
    {
      "id": "66e82e6a7838e30000b2fb7b",
      "text": "\t\tmodule: できない",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492258,
      "updated": 1726492334
    },
    {
      "id": "66e83f747838e30000b2fbb4",
      "text": "\t\t\tどうしても値（状態）を持たせたい場合は、呼び出し元でその値を保持しておいて、呼び出し時に引数に渡すという手もある",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496620,
      "updated": 1726496676
    },
    {
      "id": "66e83fac7838e30000b2fbb5",
      "text": "\t\t\t\t[関数型プログラミング]的なアプローチ",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496676,
      "updated": 1726496804
    },
    {
      "id": "66e8f0c51280f00000ea30b7",
      "text": "\t\t\t\t\t[関数プログラミング]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726542021,
      "updated": 1726563750
    },
    {
      "id": "66e840387838e30000b2fbb6",
      "text": " \t\t\tこの手法で呼び出し元のコードが煩雑にならないのであれば実用上は問題ない",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496816,
      "updated": 1726496854
    },
    {
      "id": "66e82e697838e30000b2fb79",
      "text": "\t\tclass: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492256,
      "updated": 1726492266
    },
    {
      "id": "66e830867838e30000b2fb85",
      "text": "\t5. 既存のmodule/classを元にして、一部の処理を書き換えた別のmodule/classを実装する",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726492798,
      "updated": 1726495120
    },
    {
      "id": "66e831957838e30000b2fb86",
      "text": "\t\tmodule: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493069,
      "updated": 1726493073
    },
    {
      "id": "66e831a87838e30000b2fb88",
      "text": "\t\t\tただし元のmoduleが必要な関数・変数をすべてexportしている必要がある",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493088,
      "updated": 1726493114
    },
    {
      "id": "66e831997838e30000b2fb87",
      "text": "\t\tclass: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493073,
      "updated": 1726493077
    },
    {
      "id": "66e832187838e30000b2fb8a",
      "text": "\t\t\t元のclassを継承して実装する",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493200,
      "updated": 1726493218
    },
    {
      "id": "66e831c47838e30000b2fb89",
      "text": "\t\t\tただし元のclassが継承先に必要な関数・フィールドにprivateがつけられていないことが条件",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493116,
      "updated": 1726493485
    },
    {
      "id": "66e833357838e30000b2fb8b",
      "text": "\t6. [メソッドチェーン]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493485,
      "updated": 1726495122
    },
    {
      "id": "66e833577838e30000b2fb8e",
      "text": "\t\tこういうの：`foo.bar().baz().qux()`",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493520,
      "updated": 1726493573
    },
    {
      "id": "66e833567838e30000b2fb8c",
      "text": "\t\tmodule: できない（多分）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493518,
      "updated": 1726493614
    },
    {
      "id": "66e834f51280f0000026817a",
      "text": "\t\t できない[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726493944,
      "updated": 1726493947
    },
    {
      "id": "66e833567838e30000b2fb8d",
      "text": "\t\tclass: できる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726493518,
      "updated": 1726493620
    },
    {
      "id": "66e835777838e30000b2fb94",
      "text": "\t7. class/module内部の関数を外部から直接importする",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494064,
      "updated": 1726495125
    },
    {
      "id": "66e838237838e30000b2fb95",
      "text": "\t\tmodule: できる（exportされている関数のみ）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494747,
      "updated": 1726494761
    },
    {
      "id": "66e8382a7838e30000b2fb96",
      "text": "\t\tclass: 直接は無理",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494754,
      "updated": 1726494788
    },
    {
      "id": "66e8384c7838e30000b2fb97",
      "text": "\t\t\t[static]がついている関数であっても大本のclassのimportを介す必要がある",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494788,
      "updated": 1726494827
    },
    {
      "id": "66e838737838e30000b2fb98",
      "text": "\t\t\t\tcode:ts",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494827,
      "updated": 1726494830
    },
    {
      "id": "66e838767838e30000b2fb99",
      "text": "\t\t\t\t import FooClass from \"./foo.js\"",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494830,
      "updated": 1726494846
    },
    {
      "id": "66e8389c7838e30000b2fb9a",
      "text": "\t\t\t\t FooClass.foo()",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494868,
      "updated": 1726494878
    },
    {
      "id": "66e838b97838e30000b2fb9b",
      "text": "\t\t\t\tcode:ts",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494897,
      "updated": 1726494900
    },
    {
      "id": "66e838bc7838e30000b2fb9c",
      "text": "\t\t\t\t import FooClass from \"./foo.js\"",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494900,
      "updated": 1726494907
    },
    {
      "id": "66e838c47838e30000b2fb9d",
      "text": "\t\t\t\t const foo = FooClass.foo",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494907,
      "updated": 1726494915
    },
    {
      "id": "66e838cb7838e30000b2fb9e",
      "text": "\t\t\t\t foo()",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494915,
      "updated": 1726494917
    },
    {
      "id": "66e839027838e30000b2fb9f",
      "text": "\t\t\tstaticがついていない関数はさらにインスタンスも介す必要がある",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494970,
      "updated": 1726494992
    },
    {
      "id": "66e839187838e30000b2fba0",
      "text": "\t\t\t\tcode:ts",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494992,
      "updated": 1726494994
    },
    {
      "id": "66e8391b7838e30000b2fba1",
      "text": "\t\t\t\t import FooClass from \"./foo.js\"",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494994,
      "updated": 1726495003
    },
    {
      "id": "66e839247838e30000b2fba2",
      "text": "\t\t\t\t const foo = new FooClass()",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495004,
      "updated": 1726495016
    },
    {
      "id": "66e839367838e30000b2fba3",
      "text": "\t\t\t\t foo.bar()",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495022,
      "updated": 1726495027
    },
    {
      "id": "66e82caa7838e30000b2fb6a",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726491810,
      "updated": 1726491810
    },
    {
      "id": "66e8355c7838e30000b2fb91",
      "text": "[** コメント]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494036,
      "updated": 1726494038
    },
    {
      "id": "66e8355f7838e30000b2fb92",
      "text": "[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494039,
      "updated": 1726494040
    },
    {
      "id": "66e835607838e30000b2fb93",
      "text": "\tまとめてみて、機能面ではclassはmoduleより色々できるということがわかった気がする",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726494040,
      "updated": 1726495080
    },
    {
      "id": "66e839727838e30000b2fba4",
      "text": "\t\tけれど、普段からそんないろんな機能を使うことが無い上、7番みたいにclassを使うとむしろ長くなったり、classがあることによってインデントが深くなったりする",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495082,
      "updated": 1726495180
    },
    {
      "id": "66e839d47838e30000b2fba5",
      "text": "\t\tなので、コードの簡潔さという面ではやはりclassよりmoduleの方が優れていそう",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495180,
      "updated": 1726495200
    },
    {
      "id": "66e83a0c7838e30000b2fba6",
      "text": "\tclassを使う場面というのは",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495236,
      "updated": 1726495243
    },
    {
      "id": "66e83a137838e30000b2fba7",
      "text": "\t\t上記の比較に倣って考えるなら",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495243,
      "updated": 1726495430
    },
    {
      "id": "66e83ace7838e30000b2fba8",
      "text": "\t\t\tインスタンスが必要な場面",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495430,
      "updated": 1726495434
    },
    {
      "id": "66e844195f1e0d0000ca4524",
      "text": "\t\t\t ここが一番大きいと感じた[wogikaze.icon]",
      "userId": "616ca537c25a92001e5f1e0d",
      "created": 1726497817,
      "updated": 1726497821
    },
    {
      "id": "66e865daaff09e000061134a",
      "text": "\t\t\t もう少し言葉を補うと「複数のインスタンスが異なる状態になることが必要な場面」[nishio.icon][takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726506458,
      "updated": 1726542079
    },
    {
      "id": "66e865f0aff09e000061134b",
      "text": "\t\t\t \tなので複数箇所から呼ばれるとしても内部状態を持たないならインスタンスである必要がない",
      "userId": "582e63d27c56960011aff09e",
      "created": 1726506480,
      "updated": 1726506618
    },
    {
      "id": "66e8f1011280f00000ea30b8",
      "text": "\t\t\t \t内部状態が1つだけの場合も[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542080,
      "updated": 1726542103
    },
    {
      "id": "66e8f1181280f00000ea30b9",
      "text": "\t\t\t \t このときは",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542104,
      "updated": 1726542108
    },
    {
      "id": "66e8f11b1280f00000ea30ba",
      "text": "\t\t\t \t  code:lib.ts",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542108,
      "updated": 1726542120
    },
    {
      "id": "66e8f1281280f00000ea30bb",
      "text": "\t\t\t \t   const stack: string[] = [];",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542120,
      "updated": 1726542248
    },
    {
      "id": "66e8f1301280f00000ea30bc",
      "text": "\t\t\t \t   ",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542127,
      "updated": 1726542127
    },
    {
      "id": "66e8f1301280f00000ea30bd",
      "text": "\t\t\t \t   export const pop = (): string | undefined => stack.pop();",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542128,
      "updated": 1726542162
    },
    {
      "id": "66e8f1351280f00000ea30be",
      "text": "\t\t\t \t   ",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542133,
      "updated": 1726542133
    },
    {
      "id": "66e8f1361280f00000ea30bf",
      "text": "\t\t\t \t   export const push = (item: string): void => stack.push(item);",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542135,
      "updated": 1726542176
    },
    {
      "id": "66e8f1601280f00000ea30c0",
      "text": "\t\t\t \t のようにmoduleで[singleton]を作るのが便利",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542176,
      "updated": 1726542207
    },
    {
      "id": "66e83ad27838e30000b2fba9",
      "text": "\t\t\t[メソッドチェーン]を使用したい場面",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726495434,
      "updated": 1726542253
    },
    {
      "id": "66e8f1ae1280f00000ea30c1",
      "text": "\t\t\t JSだとこれがかなりでかい[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542254,
      "updated": 1726542260
    },
    {
      "id": "66e83b277838e30000b2fbaa",
      "text": "\t\t状況で考えると",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495519,
      "updated": 1726495547
    },
    {
      "id": "66e83b437838e30000b2fbab",
      "text": "\t\t\t同じ処理を複数箇所から（もしくは一箇所から何度も）呼び出して、なおかつそれぞれに異なった状態をもたせる必要がある場合",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726495547,
      "updated": 1726495635
    },
    {
      "id": "66e83d8b7838e30000b2fbae",
      "text": "\t\t\t一言で言えないほど複雑で多岐に渡る機能を１つにまとめたい場合",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496131,
      "updated": 1726496195
    },
    {
      "id": "66e83d307838e30000b2fbad",
      "text": "\t一方でmoduleを使う場面というのは",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496040,
      "updated": 1726496218
    },
    {
      "id": "66e83de27838e30000b2fbaf",
      "text": "\t\tclassを使用する必要がない場面全て",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496218,
      "updated": 1726496253
    },
    {
      "id": "66e83ecc7838e30000b2fbb3",
      "text": "\t\t\tclassを使用するだけで（7番目の理由で）コードが複雑化するから",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496452,
      "updated": 1726496506
    },
    {
      "id": "66e841ba7838e30000b2fbbd",
      "text": "\t\t\tむやみに状態をもたせるような構造にすることはデバッグやテストの難易度を上げるから",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726497202,
      "updated": 1726497229
    },
    {
      "id": "66e841dd7838e30000b2fbbe",
      "text": "\t\t\t\t※状態を持たないclassも作れるけれど、あまりメリットがない",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726497237,
      "updated": 1726497276
    },
    {
      "id": "66e83e057838e30000b2fbb0",
      "text": "\t\t状態を持たない関数しかない場合",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496253,
      "updated": 1726496297
    },
    {
      "id": "66e83e317838e30000b2fbb1",
      "text": "\t\t関数外に状態を持っていたとしても呼び出し元全てから同じ状態を参照していても問題のない場合",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496297,
      "updated": 1726496394
    },
    {
      "id": "66e83e7b7838e30000b2fbb2",
      "text": "\t\t\t他の言語で言うクラス変数のみで事足りる場合",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496371,
      "updated": 1726496380
    },
    {
      "id": "66e8bc0879d3a900007d3ba9",
      "text": "",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528520,
      "updated": 1726528520
    },
    {
      "id": "66e8baa179d3a900007d3b98",
      "text": "[sta.icon]",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528162,
      "updated": 1726528163
    },
    {
      "id": "66e8baa279d3a900007d3b99",
      "text": "\ttypescriptのclassとmoduleは覚えてないけど、一般論としてクラスとモジュールのどっちを使うか、で議論しても良さそう",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528163,
      "updated": 1726528371
    },
    {
      "id": "66e8bab779d3a900007d3b9b",
      "text": "\t\ttypescriptも要は双方にできることとできないことが多少あるという程度",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528183,
      "updated": 1726528200
    },
    {
      "id": "66e8bac779d3a900007d3b9c",
      "text": "\t\t限度はあるが、工夫すればどうとでもなる",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528200,
      "updated": 1726528217
    },
    {
      "id": "66e8f1bb1280f00000ea30c2",
      "text": "\t\tいや、これは一般論にしないほうがいいと思います[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542267,
      "updated": 1726542289
    },
    {
      "id": "66e8f1d11280f00000ea30c3",
      "text": "\t\t `class`/`struct`/`module`はいろんな言語で採用されているが、言語ごとに仕様が若干異なり、大きな差を生むことがある",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542289,
      "updated": 1726542335
    },
    {
      "id": "66e8f2381280f00000ea30c5",
      "text": "\t\tいや、やっぱ一般論でもいいかも",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542391,
      "updated": 1726542405
    },
    {
      "id": "66e8f2451280f00000ea30c6",
      "text": "\t\t いろんな言語にわたって使われているパターンを抽出して、そのパターンを議論すればいい",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542405,
      "updated": 1726542448
    },
    {
      "id": "66e93ed5aff09e0000933319",
      "text": "\t\t 　大体パターンPで呼んだ瞬間に言語Xのユーザが考えるPと言語Yのユーザが考えるPが食い違って不毛な論争が始まる[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1726562006,
      "updated": 1726562061
    },
    {
      "id": "66e93f0daff09e000093331a",
      "text": "\t\t 　 両方同じPって言葉で違うものを指してて、相手のことを自分よりPのことをわかってないやつだと思ってるから水掛け論になる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1726562062,
      "updated": 1726562117
    },
    {
      "id": "66e8f2701280f00000ea30c7",
      "text": "\t\t 各言語でそれをどんな機能で実装するかは、各言語によって変わる",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542448,
      "updated": 1726542476
    },
    {
      "id": "66e8f28b1280f00000ea30c8",
      "text": "\t\t 　例えば",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542476,
      "updated": 1726542591
    },
    {
      "id": "66e8f2ff1280f00000ea30cb",
      "text": "\t\t 　 Rustでは[enum]で定数の集まりをよく定義するが、TypeScriptはただの定数値を使うほうが簡潔",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542591,
      "updated": 1726542591
    },
    {
      "id": "66e8f2c11280f00000ea30c9",
      "text": " \t\t 　 [TypeScriptのenum]はJSへtranspileしたとき、不要なコードが結構生じる",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542529,
      "updated": 1726542592
    },
    {
      "id": "66e8f2da1280f00000ea30ca",
      "text": " \t\t 　TypeScriptでは[tree shaking]されやすいよう、なるべく関数ベースで書くことがある",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542554,
      "updated": 1726542617
    },
    {
      "id": "66e8f3191280f00000ea30cc",
      "text": " \t\t 　 classにすると、たとえコード中で一切使われないメソッドだったとしても、bundleで削除されず残ってしまう",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542617,
      "updated": 1726542669
    },
    {
      "id": "66e8f3571280f00000ea30ce",
      "text": " \t\t 　  TypeScriptにおけるclass不要の主張は[tree shaking]の問題が大きいと思っている[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542678,
      "updated": 1726542728
    },
    {
      "id": "66e8f33f1280f00000ea30cd",
      "text": " \t\t 　 一方Rust/C++は(最適化オプションを使っている場合)ランタイムで使われないコードはすべて削除される(はず)",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542655,
      "updated": 1726542805
    },
    {
      "id": "66e8f3c21280f00000ea30cf",
      "text": " \t\t 　 　class/structを使っても、(仮想関数テーブルなどランタイムに影響するものを除けば)関数ベースで書くのと比べてオーバーヘッドはほとんどないはず",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542786,
      "updated": 1726542893
    },
    {
      "id": "66e8f4341280f00000ea30d0",
      "text": "\t\t(これを踏まえると、このページはTypeScriptで具体的な実装に落とし込むときの機能選定の話題に絞っていそうだから、ここのツリーは切り出すとよさそう)",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726542901,
      "updated": 1726543007
    },
    {
      "id": "66e8bad479d3a900007d3b9d",
      "text": "\t僕はclass派だなぁ",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528213,
      "updated": 1726528224
    },
    {
      "id": "66e8bae079d3a900007d3b9e",
      "text": "\t\t[OOP]に親しんでいるので",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1726528224,
      "updated": 1726542376
    },
    {
      "id": "66e8bae379d3a900007d3b9f",
      "text": "\t\tでも昨今は（[Golang]くらいからか？）OOPよりも構造体とそれくくるモジュール的な単位くらいでいいよね、の流れも感じる",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1726528228,
      "updated": 1726542979
    },
    {
      "id": "66e8bb1379d3a900007d3ba0",
      "text": "\t\t\t[チームプレイ]ならこっちがいいのかもしれないなー",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1726528276,
      "updated": 1726542984
    },
    {
      "id": "66e8bb1979d3a900007d3ba1",
      "text": "\t\t\tOOPだと[クラスのつくりかた]で宗教論争になるイメージ、まあ言葉や概念を設計するに等しいからなぁ",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1726528281,
      "updated": 1726542991
    },
    {
      "id": "66e8bb4879d3a900007d3ba2",
      "text": "\t\t\t一方、昨今のやり方だともうちょっと雑に組める",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528329,
      "updated": 1726528339
    },
    {
      "id": "66e8bb7f79d3a900007d3ba4",
      "text": "\t\t単に僕が[静的型付け]を知らないかもしれない",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1726528384,
      "updated": 1726543000
    },
    {
      "id": "66e8bb8879d3a900007d3ba5",
      "text": "\t\t\tpythonみたいなLLばっか使ってる僕",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528392,
      "updated": 1726528398
    },
    {
      "id": "66e8bb8d79d3a900007d3ba6",
      "text": "\t\t\t静的みたいにコンパイルしたらわかる、とかないから品質を担保するための仕組みをコードに入れる必要がある、煩雑になりがち……",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528398,
      "updated": 1726528450
    },
    {
      "id": "66e8bbdd79d3a900007d3ba8",
      "text": "\t\t\t\t特にテストコード絡めると実装量は少なくとも二倍くらいにはなる",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528478,
      "updated": 1726528485
    },
    {
      "id": "66e8bba179d3a900007d3ba7",
      "text": "\t\t\tでも静的だとそこまでやらなくていいから、仕組みつくるための複雑な機構（class）が要らないのでは説",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528418,
      "updated": 1726528509
    },
    {
      "id": "66e8baa279d3a900007d3b9a",
      "text": "",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1726528163,
      "updated": 1726528163
    },
    {
      "id": "66e80f0d7838e30000c446fa",
      "text": "基本クラスに倒した上で「1クラス1モジュール」かな[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1726484229,
      "updated": 1726518273
    },
    {
      "id": "66e810ca71b3c20000571dd9",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1726484683,
      "updated": 1726484683
    },
    {
      "id": "66e840c17838e30000b2fbb7",
      "text": "[** 関連してそうなページ]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496952,
      "updated": 1726496958
    },
    {
      "id": "66e840c77838e30000b2fbb9",
      "text": "\t中立派",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496959,
      "updated": 1726496963
    },
    {
      "id": "66e840cc7838e30000b2fbba",
      "text": "\tmodule派（もしくは非class派）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496963,
      "updated": 1726496982
    },
    {
      "id": "66e840de7838e30000b2fbbb",
      "text": " \t[/mrsekut-p/TypeScriptでは基本的にclassを使わない]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496982,
      "updated": 1726496986
    },
    {
      "id": "66e8426b7838e30000b2fbbf",
      "text": " \t[不要なクラス宣言、やめちゃおっか？ - タオルケット体操 https://hachibeechan.hateblo.jp/entry/you-might-not-want-to-declare-classes]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726497379,
      "updated": 1726497379
    },
    {
      "id": "66e840e57838e30000b2fbbc",
      "text": "\tclass派（もしくは非module派）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496989,
      "updated": 1726497005
    },
    {
      "id": "66e840c17838e30000b2fbb8",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1726496953,
      "updated": 1726496953
    }
  ]
}