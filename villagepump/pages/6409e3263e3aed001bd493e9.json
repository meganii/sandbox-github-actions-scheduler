{
  "id": "6409e3263e3aed001bd493e9",
  "title": "Scrapboxのjsonから文字数の分布を可視化する",
  "created": 1678369575,
  "updated": 1679032391,
  "lines": [
    {
      "id": "6409e3263e3aed001bd493e9",
      "text": "Scrapboxのjsonから文字数の分布を可視化する",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369657
    },
    {
      "id": "6409e327774b17000010995e",
      "text": "のりしろ",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369587
    },
    {
      "id": "6409e332774b17000010997c",
      "text": "　[Scrapbox ChatGPT Connector]を使うにあたり8000トークン以上の記事がどれぐらいあるか知りたかった",
      "userId": "59fb21121207900012774b17",
      "created": 1678369587,
      "updated": 1678369599
    },
    {
      "id": "640ae049774b17000003597a",
      "text": "",
      "userId": "59fb21121207900012774b17",
      "created": 1678434378,
      "updated": 1678434378
    },
    {
      "id": "640ae049774b17000003597b",
      "text": "結論",
      "userId": "59fb21121207900012774b17",
      "created": 1678434378,
      "updated": 1678434380
    },
    {
      "id": "640ae04b774b17000003597c",
      "text": " [Scrapboxのjsonから文字数の分布を可視化する#6409e327774b170000109976]",
      "userId": "59fb21121207900012774b17",
      "created": 1678434380,
      "updated": 1678434382
    },
    {
      "id": "6409e341774b17000010997d",
      "text": "",
      "userId": "59fb21121207900012774b17",
      "created": 1678369601,
      "updated": 1678369601
    },
    {
      "id": "6409e327774b170000109960",
      "text": " [基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109961",
      "text": "　 以下のフォーマットのjsonに対してjqを使ってlines要素のそれぞれの文字列カウントをするzshで動く[ワンライナー]を書いてください",
      "userId": "5b5e7121417cf700145b98c2",
      "created": 1678369575,
      "updated": 1679032391
    },
    {
      "id": "6409e327774b170000109962",
      "text": "  code:zsh",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109963",
      "text": "   {\"name\":\"motoso\",\"displayName\":\"基素基\",\"exported\":1678366154,\"pages\":[",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109964",
      "text": "   {\"title\":\"静電気\",\"created\":1670703682,\"updated\":1678360502,\"id\":\"6394e9df54326b001e527fdd\",\"lines\":[\"静電気\",\"https://guard.lion.co.jp/eleguard/coordinate/\",\"[https://gyazo.com/620808bd024d650421fa02cf22ac6ec3]\",\"\",\"[アクリル]と[ナイロン]が混じってる服が帯電するのはこのせいか\",\"\",\"それぞれの極性に[帯電]しやすい物質の順番を示した[帯電列]\",\"https://www.achilles.jp/product/electronics/knowledge/static-electricity/#:~:text=物質によってプラスに帯電,ということになります%E3%80%82\",\"[https://gyazo.com/3137ff28d09f699d16e780b1ddace87d]\",\"\",\"\"]},",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109965",
      "text": "   {\"title\":\"公開読書\",\"created\":1678354135,\"updated\":1678354410,\"id\":\"6409a6d4a45c78001cfb51ab\",\"lines\":[\"公開読書\",\"読書の感想文や自分の言葉でのまとめを公開でやる読書\",\"　ここで公開とは、他人の意見がもらえる場所=他人の目につく場所ってこと\",\"ねらい\",\"　[インターネットは他人が自分の誤解を訂正してくれるかもしれない]\",\"　[口コミ]で他人が興味を持ってその本を買えば著者にも還元される\",\"\",\"[アクティブ読書]のように著作物をそのまま掲載はしない\",\"　引用の要件を満たせない\",\"　[自分がされたら嫌]だ\",\"\"]},",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109966",
      "text": "   ]}",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109967",
      "text": "   ```",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109968",
      "text": "  ただし、linesの各要素の文字列は1つに結合してください",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109969",
      "text": " [ChatGPT.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b17000010996a",
      "text": "  `cat data.json | jq -r '.pages[].lines | map(select(. != \"\")) | join(\" \")' | wc -w`",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b17000010996b",
      "text": "  cat data.jsonでjsonファイルを読み込みます。",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b17000010996c",
      "text": "  `jq -r '.pages[].lines | map(select(. != \"\")) | join(\" \")'`で、各ページのlines要素を取得し、空文字列を除外して、それぞれの文字列を半角スペースで結合します。ここで、-rオプションを指定することで、文字列を生の形式で出力します。",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b17000010996d",
      "text": "  `wc -w`で、全体の単語数を数えます。これにより、各ページのlines要素の文字列カウントが求められます。",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b17000010996e",
      "text": "   これだと全部になっちゃうので1行ごとにカウントしてほしい[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b17000010996f",
      "text": "　　$ cat data.json | jq -r '.pages[].lines | map(select(. != \"\")) | map(length) | @csv' | sed 's/\"//g'",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109970",
      "text": "　　 うーん。これだと各要素が結合されないぞ[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109971",
      "text": "　[基素.icon]各lines要素は結合した上で文字数を数えてください",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109972",
      "text": " [ChatGPT.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109973",
      "text": "　　$ cat data.json | jq -r '.pages[].lines | map(select(. != \"\")) | join(\"\") | length'",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109974",
      "text": "　　良さそう[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109975",
      "text": "　[基素.icon]これらで得られた文字数のヒストグラムをshellに出したいです。区間は1000ごとにしてください。ワンライナーでお願いします",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109976",
      "text": "　[ChatGPT.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e327774b170000109977",
      "text": "　 $ cat data.json | jq -r '.pages[].lines | map(select(. != \"\")) | join(\"\") | length' | awk '{x[int($1/1000)]++} END {for (i in x) {printf \"%d-%d: %d\\n\", i*1000, (i+1)*1000-1, x[i]}}' | sort -n",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    },
    {
      "id": "6409e351774b17000010997e",
      "text": "　分布を見た感想[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1678369617,
      "updated": 1678369623
    },
    {
      "id": "6409e327774b170000109978",
      "text": "  69000文字以上の記事がある...なに？",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369625
    },
    {
      "id": "6409e327774b170000109979",
      "text": "  　minifyしたコードかな？",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369625
    },
    {
      "id": "6409e327774b17000010997a",
      "text": "  0.2%ぐらいが8000字を超える",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369636
    },
    {
      "id": "6409e327774b17000010997b",
      "text": "",
      "userId": "59fb21121207900012774b17",
      "created": 1678369575,
      "updated": 1678369575
    }
  ]
}