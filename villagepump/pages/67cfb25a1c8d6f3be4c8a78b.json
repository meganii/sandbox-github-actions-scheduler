{
  "id": "67cfb25a1c8d6f3be4c8a78b",
  "title": "nested if, else if, switch文を全て禁止するコーディング規約",
  "created": 1741664863,
  "updated": 1744023480,
  "lines": [
    {
      "id": "67cfb25a1c8d6f3be4c8a78b",
      "text": "nested if, else if, switch文を全て禁止するコーディング規約",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1741664863,
      "updated": 1741665092
    },
    {
      "id": "67cfb27a7838e30000eaa520",
      "text": "> [@StewEucen https://twitter.com/StewEucen/status/1899106450896785806]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741664888,
      "updated": 1741666797
    },
    {
      "id": "67cfb9efe5172d000038d2d1",
      "text": "> 「if 文のネストを else if も含めて一切禁止する」のコーディングルールを数年運用してまして。実装で困るメンバーはなく、何の不都合もないってのが分かりましたでござる。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666797,
      "updated": 1741666797
    },
    {
      "id": "67cfb9efe5172d000038d2d2",
      "text": "> ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666797,
      "updated": 1741666797
    },
    {
      "id": "67cfb9efe5172d000038d2d3",
      "text": "> 複雑なコードがプルリクエストに含まれないメリットは大きく、導入しない理由は存在しませぬ。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666797,
      "updated": 1741666797
    },
    {
      "id": "67cfb9efe5172d000038d2d4",
      "text": "> ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666797,
      "updated": 1741666797
    },
    {
      "id": "67cfb9efe5172d000038d2d5",
      "text": "> (・ω・)＜おわかりか",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666797,
      "updated": 1741666797
    },
    {
      "id": "67cfb27f7838e30000eaa521",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1741664893,
      "updated": 1741664893
    },
    {
      "id": "67cfb2917838e30000eaa522",
      "text": "[単一責務]の関数と[早期return]を駆使して実現するらしい",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1741664911,
      "updated": 1741664949
    },
    {
      "id": "67f3a2fa0000000000aa6107",
      "text": "\t早期 return を if 文を使わずにどうやって実現するんだ？[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020219,
      "updated": 1744020242
    },
    {
      "id": "67cfb2967838e30000eaa523",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1741664916,
      "updated": 1741664916
    },
    {
      "id": "67cfb2fb7838e30000244942",
      "text": "禁止までいくとコーディング難易度上がるのでちょっと難しいと思うけど、[非推奨]レベルなら良さそう[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1741665017,
      "updated": 1741665059
    },
    {
      "id": "67cfb2fc7838e30000244943",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1741665018,
      "updated": 1741665018
    },
    {
      "id": "67cfb82071b3c200004bf13d",
      "text": "三項演算子と[即時実行関数式]を駆使すれば[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666337,
      "updated": 1741666515
    },
    {
      "id": "67cfb83a71b3c200004bf13f",
      "text": "\tcode:js",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666362,
      "updated": 1741666376
    },
    {
      "id": "67cfb84871b3c200004bf140",
      "text": "\t condition ? (()=>{",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666376,
      "updated": 1741666431
    },
    {
      "id": "67cfb88871b3c200004bf142",
      "text": "\t // true",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666440,
      "updated": 1741666448
    },
    {
      "id": "67cfc09e71b3c2000071c620",
      "text": "\t \tcondition2 ? (()=>{",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668510,
      "updated": 1741668521
    },
    {
      "id": "67cfc09e71b3c2000071c621",
      "text": "  \t // true",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668510,
      "updated": 1741668510
    },
    {
      "id": "67cfc09e71b3c2000071c622",
      "text": "  \t })() : (()=>{",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668510,
      "updated": 1741668510
    },
    {
      "id": "67cfc09e71b3c2000071c623",
      "text": "  \t // false",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668510,
      "updated": 1741668510
    },
    {
      "id": "67cfc09e71b3c2000071c624",
      "text": "  \t })()",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668510,
      "updated": 1741668510
    },
    {
      "id": "67cfb87f71b3c200004bf141",
      "text": "\t })() : (()=>{",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666432,
      "updated": 1741666465
    },
    {
      "id": "67cfb8a171b3c200004bf143",
      "text": "\t // false",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666465,
      "updated": 1741666470
    },
    {
      "id": "67cfc0a071b3c2000071c625",
      "text": "\t \tcondition2 ? (()=>{",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668512,
      "updated": 1741668523
    },
    {
      "id": "67cfc0a071b3c2000071c626",
      "text": "  \t // true",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668512,
      "updated": 1741668512
    },
    {
      "id": "67cfc0a071b3c2000071c627",
      "text": "  \t })() : (()=>{",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668512,
      "updated": 1741668512
    },
    {
      "id": "67cfc0a071b3c2000071c628",
      "text": "  \t // false",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668512,
      "updated": 1741668512
    },
    {
      "id": "67cfc0a071b3c2000071c629",
      "text": "  \t })()",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741668512,
      "updated": 1741668512
    },
    {
      "id": "67cfb8a171b3c200004bf144",
      "text": "\t })()",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666465,
      "updated": 1741666466
    },
    {
      "id": "67f3a2ba0000000000aa6106",
      "text": "\t余計悪くなるの草[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020155,
      "updated": 1744020161
    },
    {
      "id": "67f3a4d50000000000aa612d",
      "text": "\tいいこと思いついた[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020694,
      "updated": 1744020705
    },
    {
      "id": "67f3a4e00000000000aa612e",
      "text": "\t\t`c&&(()=>{/*T*/c2&&(()=>{/*T*/})()||(()=>{/*F*/})()})()||(()=>{/*F*/c2&&(()=>{/*T*/})()||(()=>{/*F*/})()})()`",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020705,
      "updated": 1744020943
    },
    {
      "id": "67f3a5d20000000000aa613d",
      "text": " \t\tできあがり",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020947,
      "updated": 1744020955
    },
    {
      "id": "67f3ac1b0000000000d71624",
      "text": " \t\t括弧レベルのハイライトがないと死ぬやつだ[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1744022555,
      "updated": 1744022571
    },
    {
      "id": "67cfb83871b3c200004bf13e",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741666360,
      "updated": 1741666360
    },
    {
      "id": "67cfba83e5172d000038d2d6",
      "text": "> [@KeplerianSpace https://twitter.com/KeplerianSpace/status/1899250253586640951]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666946,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2db",
      "text": "> [@StewEucen https://twitter.com/StewEucen] ネストはともかく、else ifを禁止する理由がわからないです。switch-caseも禁止ですか？",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2dc",
      "text": "> else ifを排除したところで、全体としての複雑さは変わらないと思います。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2dd",
      "text": "> 関数単位のユニットテスト漏れが検出しやすいメリットがあるのかと思いましたが、andとかorとかも禁止ですか？",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2de",
      "text": "> [@StewEucen https://twitter.com/StewEucen/status/1899250906816012297]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2df",
      "text": "> [@KeplerianSpace https://twitter.com/KeplerianSpace] 弊社のコーディング規約では、nested if 以外にも以下が禁止になってまして。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e0",
      "text": "> ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e1",
      "text": "> switch 文",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e2",
      "text": "> for",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e3",
      "text": "> while",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e4",
      "text": "> do-while",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e5",
      "text": "> for-in",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e6",
      "text": "> for-of",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e7",
      "text": "> Array#forEach()",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e8",
      "text": "> ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2e9",
      "text": "> 「メソッド・関数の責務が自然に分割される」のが最大の利点でござった。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2ea",
      "text": "> [@KeplerianSpace https://twitter.com/KeplerianSpace/status/1899252789622300870]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2eb",
      "text": "> [@StewEucen https://twitter.com/StewEucen] ループも禁止なんですね。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2ec",
      "text": "> 正直Xの限られた文字数だと完全な意図がよくわからないので、どこかに規約を乗せてもらえると助かります。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2ed",
      "text": "> [@StewEucen https://twitter.com/StewEucen/status/1899255374248890766]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2ee",
      "text": "> [@KeplerianSpace https://twitter.com/KeplerianSpace] > Xの限られた文字数だと完全な意図がよくわからない",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2ef",
      "text": "> 此れには同意ッス🤝✨",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2f0",
      "text": "> ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2f1",
      "text": "> 書き忘れたんですけど、let/var も禁止でした。const オンリー。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2f2",
      "text": "> ",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba92e5172d000038d2f3",
      "text": "> 弊社のコーディング規約をまとめるだけで、読み物になりそうッスね。今のタスクが半減したらトライしてみまする。",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666961,
      "updated": 1741666961
    },
    {
      "id": "67cfba8ee5172d000038d2da",
      "text": "",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666957,
      "updated": 1741666957
    },
    {
      "id": "67cfba9ce5172d000038d2f4",
      "text": "ループも禁止、すごい[yosider.icon]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666970,
      "updated": 1741666977
    },
    {
      "id": "67cfbaafe5172d000038d2f6",
      "text": " 全部mapということ？",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666989,
      "updated": 1741667006
    },
    {
      "id": "67cfbdce1982700000bc1308",
      "text": " 全部再帰ということか！()[mrsekut.icon][bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1741667790,
      "updated": 1744019703
    },
    {
      "id": "67f3a1000000000000d71622",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1744019713,
      "updated": 1744019713
    },
    {
      "id": "67f3a0ea0000000000d71621",
      "text": "それがしたいなら関数型言語使えば[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1744019691,
      "updated": 1744019715
    },
    {
      "id": "67cfbaa1e5172d000038d2f5",
      "text": "",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1741666975,
      "updated": 1741666975
    },
    {
      "id": "67f3a47e0000000000aa612c",
      "text": "基本的にやってるけど部分的に破る[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020608,
      "updated": 1744020618
    },
    {
      "id": "67f3a47b0000000000aa612a",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020605,
      "updated": 1744020605
    },
    {
      "id": "67f3a47c0000000000aa612b",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020605,
      "updated": 1744020605
    },
    {
      "id": "67f3a38d0000000000aa6108",
      "text": "[GPT-4o.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020367,
      "updated": 1744020372
    },
    {
      "id": "67f3a3940000000000aa610a",
      "text": "\tここに書かれているような厳しいコーディング規約は、[* 理論上は可能ですが、非常に極端で、実用性については疑問符がつきます]。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020373,
      "updated": 1744020392
    },
    {
      "id": "67f3a39e0000000000aa610b",
      "text": " 実際にこのようなルールを採用する企業は、極端なまでの関数の細分化や純粋関数型プログラミングの考え方を取り入れている可能性が高く、次のような目的があります。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020383,
      "updated": 1744020398
    },
    {
      "id": "67f3a38f0000000000aa6109",
      "text": " [** 実施可能な理由・メリット]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020368,
      "updated": 1744020414
    },
    {
      "id": "67f3a3b80000000000aa610f",
      "text": "  関数の分割促進",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020409,
      "updated": 1744020422
    },
    {
      "id": "67f3a3c40000000000aa6110",
      "text": "   if-else、switch、ループを排除することで、関数が小さく細分化され、単一責務原則（Single Responsibility Principle）を徹底できます。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020422,
      "updated": 1744020426
    },
    {
      "id": "67f3a3cb0000000000aa611a",
      "text": "   ユニットテスト容易性の向上",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020428,
      "updated": 1744020429
    },
    {
      "id": "67f3a3c40000000000aa6115",
      "text": "    細分化された関数ごとにテストが容易になり、バグの発見や責任の所在が明確になります。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020422,
      "updated": 1744020432
    },
    {
      "id": "67f3a3c40000000000aa6117",
      "text": "  副作用の排除",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020422,
      "updated": 1744020422
    },
    {
      "id": "67f3a3c40000000000aa6118",
      "text": "   ループや変数（let/var）を禁止し、constのみ許可することで、データの状態変更（ミュータブル性）を抑え、バグや副作用を減らすことができます。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020422,
      "updated": 1744020437
    },
    {
      "id": "67f3a3d50000000000aa611b",
      "text": " [** 実際の運用上の難しさ・問題点]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020438,
      "updated": 1744020450
    },
    {
      "id": "67f3a3df0000000000aa611c",
      "text": "  コードの冗長化",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020448,
      "updated": 1744020455
    },
    {
      "id": "67f3a3e60000000000aa611d",
      "text": "   簡単な処理でも関数が多数必要になり、コードが分散し、逆に管理が複雑になる可能性があります。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020455,
      "updated": 1744020462
    },
    {
      "id": "67f3a3e60000000000aa611f",
      "text": "  開発効率の低下",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020462,
      "updated": 1744020463
    },
    {
      "id": "67f3a3e60000000000aa6121",
      "text": "   慣れるまで開発スピードが著しく低下するリスクがあります。特にループ処理の代替として再帰を多用すると、可読性や性能の問題も起きやすくなります。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020455,
      "updated": 1744020465
    },
    {
      "id": "67f3a41e0000000000aa6128",
      "text": "    [逆わかる〜！！.icon][Summer498.icon][bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1744020511,
      "updated": 1744023479
    },
    {
      "id": "67f3a3e60000000000aa6123",
      "text": "  実行性能の問題",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020455,
      "updated": 1744020469
    },
    {
      "id": "67f3a3e60000000000aa6125",
      "text": "   一般的にループよりも再帰のほうがメモリ消費やスタックオーバーフローのリスクが高いため、性能面での課題が生じる可能性があります。",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020455,
      "updated": 1744020472
    },
    {
      "id": "67f3a3ad0000000000aa610d",
      "text": "    [逆わかる〜！！.icon][Summer498.icon][bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1744020399,
      "updated": 1744023480
    },
    {
      "id": "67f3a3ad0000000000aa610e",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1744020399,
      "updated": 1744020399
    }
  ]
}