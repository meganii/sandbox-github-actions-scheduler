{
  "id": "62275a258e868d001ddd0c12",
  "title": "宣言的○○",
  "created": 1646746150,
  "updated": 1745413607,
  "lines": [
    {
      "id": "62275a258e868d001ddd0c12",
      "text": "宣言的○○",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038407d",
      "text": "from [宣言的UI]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038407f",
      "text": "　直接関係ないのだけれど[kubernetes]が同じように宣言的インフラ管理で流行ってるのだけれど、こういうのは分野問わず流行りなんですかね？[inajob.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384080",
      "text": "　 状態管理って難しいということなのかな[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384081",
      "text": "　  インフラだと、IaaS言われてChef/Ansibleが出て（どっちが先？）、コードでインフラを管理するのが当たり前になった。Dockerはさらに一歩進めてランタイムを含めた環境を一緒にできる",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384082",
      "text": "　  \tKubernetesは、宣言的にコンテナを書いておくと、障害などで宣言状態を満たさなくなった時に自動復旧してくれたりします。ChefやAnsibleより抽象的なイメージ。",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384083",
      "text": "　  \t より抽象的なイメージですが、足回りの流れはこのような流れなのかなと思っていました[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384084",
      "text": "　  \t \tKubernetesはDockerなどを操作するマネージャみたいなものなので、合ってると思います",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384085",
      "text": "　    Chefは状態を定義してそこに収束する[メンタルモデル]だったので、そこがちょっと似てる感じがします[基素.icon]",
      "userId": "5b5e7121417cf700145b98c2",
      "created": 1646746150,
      "updated": 1670321848
    },
    {
      "id": "62275a25774b170000384086",
      "text": "　     >Converge the node",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384087",
      "text": "　      https://docs.chef.io/chef_client_overview/",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384088",
      "text": "　    \tChefやってないのばれた[inajob.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384089",
      "text": "　    \t 最近めっきり見かけないChefくん....[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038408a",
      "text": "　    \tAnsibleがそうしようとして頑張ってるけど出来ない感があってもどかしい感じがしてます[inajob.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038408b",
      "text": "　    \t immutableにするの難しい[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038408c",
      "text": "　  フロントでもglobalな状態であるDOMの扱いは悩みのタネだった。Nodeのmodureなどでスコープを小さくした。ブラウザ標準でESMのmodulesがproduction readyになる（なってる？）",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038408d",
      "text": "　   これ話がずれてきてるw[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038408e",
      "text": "　   CSSも命名規則が被らないように運用でカバーしたり、CSS ModulesとかCSS in JSとか、スコープを小さくする技術が発展した",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b17000038408f",
      "text": "　   「グローバルな状態がつらい→状態の影響を小さくする」流れから、",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1646746150,
      "updated": 1745413435
    },
    {
      "id": "6808e53b0000000000e21ecd",
      "text": "　   どこかで「状態を人間が管理するのは無理」「宣言的に状態を定義して収束」という発想が生まれないだろうか？",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1745413435,
      "updated": 1745413435
    },
    {
      "id": "67945fc471b3c20000e341e2",
      "text": "　  \t\t状態管理はスケールしないだけ[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1737777092,
      "updated": 1745413607
    },
    {
      "id": "62275a25774b170000384090",
      "text": "\t\tAWSのMWAA（というより[Apache Airflow]）とか？[sta.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384091",
      "text": "\t\t\tWorkflow As Codeで宣言的にワークフローを定義するものだと思っている",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384092",
      "text": " \t[宣言的プログラミング]でUIを書こうというのが宣言的UIだと思う[mrsekut.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384093",
      "text": " \t\tだから「宣言的」だけで取り出したら該当するものは割とある思う",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384094",
      "text": " \t\t[Nix]も「宣言的パッケージマネージャ」みたいに呼ばれることがある",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    },
    {
      "id": "62275a25774b170000384095",
      "text": " \t\t純粋な関数型言語はUIかどうかに関係なくほとんど宣言的",
      "userId": "5b4ea932de544f0014198270",
      "created": 1646746150,
      "updated": 1646747559
    },
    {
      "id": "62275a25774b170000384096",
      "text": " \t\t[宣言的UI]は、状態を扱わない宣言的プログラミングと、[仮想DOM]の組み合わせがめっちゃ良いじゃん、になった印象",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646747281
    },
    {
      "id": "62275a25774b170000384097",
      "text": "",
      "userId": "59fb21121207900012774b17",
      "created": 1646746150,
      "updated": 1646746150
    }
  ]
}