{
  "id": "67e3e40b1f6242999455a555",
  "title": "factory/abstract factory",
  "created": 1742988302,
  "updated": 1742997653,
  "lines": [
    {
      "id": "67e3e40b1f6242999455a555",
      "text": "factory/abstract factory",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf5c",
      "text": "from [2025/03/26]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf5d",
      "text": " factory/abstract factory",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf5e",
      "text": "[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf5f",
      "text": "\tFactory とか Abstract Factory ってなんだ？",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf60",
      "text": "\t\t普通の constructor は instance を生成する factory ではないのか？",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf61",
      "text": "\t\t多分失敗ネーム",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf62",
      "text": " \t`document.createElement(\"div\")`",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf63",
      "text": " \t\tこれがファクトリメソッドの好例",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf64",
      "text": " \t\t\t渡す文字列によって得られるインスタンスが変わる",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf65",
      "text": " \t\t\tプロトタイプパターンでもある",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf66",
      "text": " \tconstructor に代わるインスタンス生成メソッド",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf67",
      "text": " \t\t",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf68",
      "text": "\tオレも無意識に factory を作ってると思うんだよなー",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf69",
      "text": "\t\t振り返ると作ってる",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf6a",
      "text": "\t\t\t処理を全部 abstract class に押し込んで、sub class の記述は `constructor(...args:HOGE){super(\"hoge-class\",...args:HOGE)}` だけ",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e3e40ced60e600001ebf6b",
      "text": "\t\t\tfactory を sub class の constructor でラップしている",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    },
    {
      "id": "67e40556e8db320000c138cc",
      "text": "\t[23のデザインパターン]（GoFのデザインパターン）でいうところのAbstract Factoryパターンは、今風に言うと[DIコンテナ]に近いのではないかと思っています。[mgn901.icon]",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742996823,
      "updated": 1742997066
    },
    {
      "id": "67e40615e8db320000c138d0",
      "text": "\t\tAbstract Factoryは、オブジェクトを生成するメソッドの複数を、1つのオブジェクトにまとめる。",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997013,
      "updated": 1742997124
    },
    {
      "id": "67e40686e8db320000c138d1",
      "text": "\t\tDIコンテナは、複数の依存を1つのDIコンテナにまとめる。",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997127,
      "updated": 1742997211
    },
    {
      "id": "67e40611e8db320000c138cf",
      "text": "\tGoF本のFactory Methodパターンは「オブジェクトをつくる関数」以上の意味合いを持っている。[mgn901.icon]",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997010,
      "updated": 1742997059
    },
    {
      "id": "67e406dde8db320000c138d3",
      "text": "\t\t[https://gyazo.com/2e8abbb9cc0543d9aeb415105cd91c26]",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997213,
      "updated": 1742997244
    },
    {
      "id": "67e40714e8db320000c138d5",
      "text": "\t\t`Creator`は、`anOperation()`の中で`this.factoryMethod()`を呼び出すことで、`factoryMethod()`の使い方を規定している。`factoryMedthod()`の実装はしていない。",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997268,
      "updated": 1742997402
    },
    {
      "id": "67e40763e8db320000c138d9",
      "text": "\t\t`factoryMethod()`を実装しているのは`ConcreteCreator`。",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997348,
      "updated": 1742997527
    },
    {
      "id": "67e40827e8db320000c138db",
      "text": "\t\t大雑把な処理の流れは抽象・基底クラス側で決めて、各処理で具体的に何をするのかは具象・派生クラス側で決めている。",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997543,
      "updated": 1742997653
    },
    {
      "id": "67e406fbe8db320000c138d4",
      "text": "",
      "userId": "615d68a2d7a667001de8db32",
      "created": 1742997244,
      "updated": 1742997244
    },
    {
      "id": "67e3e40ced60e600001ebf6c",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1742988302,
      "updated": 1742988302
    }
  ]
}