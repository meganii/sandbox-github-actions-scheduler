{
  "id": "6161c18a706480001df06d5e",
  "title": "アクターモデル",
  "created": 1633796495,
  "updated": 1633798465,
  "lines": [
    {
      "id": "6161c18a706480001df06d5e",
      "text": "アクターモデル",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796495,
      "updated": 1633796495
    },
    {
      "id": "6161c18e666872000063d910",
      "text": "[https://ja.wikipedia.org/wiki/アクターモデル アクターモデル - Wikipedia]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796495,
      "updated": 1633796504
    },
    {
      "id": "6161c198666872000063d912",
      "text": ">アクターモデル（英: actor model）とは、1973年、カール・ヒューイット、Peter Bishop、Richard Steiger が発表した並行計算の数学的モデルの一種。アクターモデルでは、並行デジタル計算の汎用的基本要素として「アクター」という概念を導入している。アクターモデルは並行性の理論的理解のフレームワークとして使われるほか、並行システムの実装の理論的基礎としても利用されてきた。",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796504,
      "updated": 1633796520
    },
    {
      "id": "6161c197666872000063d911",
      "text": ">（中略）",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796503,
      "updated": 1633796552
    },
    {
      "id": "6161c1c8666872000063d914",
      "text": ">アクターは並行的に受信するメッセージに対応した以下のような振る舞いを備えた計算実体（Computational Entity）である:",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796553,
      "updated": 1633796554
    },
    {
      "id": "6161c1ca666872000063d915",
      "text": "> ",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796554,
      "updated": 1633796554
    },
    {
      "id": "6161c1ca666872000063d916",
      "text": "> （他の）アクターに有限個のメッセージを送信する。",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796554,
      "updated": 1633796554
    },
    {
      "id": "6161c1ca666872000063d917",
      "text": "> 有限個の新たなアクターを生成する。",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796554,
      "updated": 1633796554
    },
    {
      "id": "6161c1ca666872000063d918",
      "text": "> 次に受信するメッセージに対する動作を指定する。",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796554,
      "updated": 1633796554
    },
    {
      "id": "6161c1cd666872000063d91a",
      "text": ">",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796558,
      "updated": 1633796561
    },
    {
      "id": "6161c1ca666872000063d919",
      "text": "> これらの振る舞いには逐次性は前提とされておらず、並列的にこれらを実行する。",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796554,
      "updated": 1633796554
    },
    {
      "id": "6161c1c2666872000063d913",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633796546,
      "updated": 1633796546
    },
    {
      "id": "6161c5ae666872000063d922",
      "text": "この部分的実装として[PLASMA]が生まれる",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633797550,
      "updated": 1633797588
    },
    {
      "id": "6161c5b3666872000063d923",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633797555,
      "updated": 1633797555
    },
    {
      "id": "6161c898666872000063d92b",
      "text": "[Gerald Jay Sussman]と[Guy L. Steele]は、[Scheme]の開発を通じて、[アクターモデル]が本質的には、決して値を返さないが、その代わりに[継続]を行うクロージャであると結論づけた",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633798296,
      "updated": 1633798343
    },
    {
      "id": "6161c925666872000063d92d",
      "text": " [https://en.wikipedia.org/wiki/History_of_the_Scheme_programming_language#Carl_Hewitt,_the_Actor_model,_and_the_birth_of_Scheme History of the Scheme programming language - Wikipedia #Carl_Hewitt,_the_Actor_model,_and_the_birth_of_Scheme]",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633798437,
      "updated": 1633798465
    },
    {
      "id": "6161c928666872000063d92e",
      "text": " ",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633798440,
      "updated": 1633798440
    },
    {
      "id": "6161c89a666872000063d92c",
      "text": "",
      "userId": "5ee7f26f1c0c850025666872",
      "created": 1633798298,
      "updated": 1633798298
    }
  ]
}