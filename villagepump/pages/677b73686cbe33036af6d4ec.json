{
  "id": "677b73686cbe33036af6d4ec",
  "title": "Wayland",
  "created": 1736143749,
  "updated": 1736148635,
  "lines": [
    {
      "id": "677b73686cbe33036af6d4ec",
      "text": "Wayland",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736143749,
      "updated": 1736143749
    },
    {
      "id": "677b738371b3c200003cd496",
      "text": "[X11]をより現代的でセキュアかつ、シンプルにしたもの",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736143749,
      "updated": 1736143928
    },
    {
      "id": "677b74f571b3c200003cd49b",
      "text": "[コンポジット型ウインドウマネージャー]を前提としてる",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144117,
      "updated": 1736144141
    },
    {
      "id": "677b754471b3c200003cd49d",
      "text": "また、X11当時はメインフレームを共有で使ってたためネットワーク透過性があったが、現在ではVNC/RDPで十分なためネットワーク透過性を省くことでパフォーマンスの向上を目指してる",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144196,
      "updated": 1736144363
    },
    {
      "id": "677b743871b3c200003cd499",
      "text": "互換性は基本的にない",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736143928,
      "updated": 1736143942
    },
    {
      "id": "677b744671b3c200003cd49a",
      "text": "\t[XWayland](ほとんどのWaylandデスクトップ環境には標準で入ってる)を使うことでX11とWaylandの橋渡しができる",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736143942,
      "updated": 1736143995
    },
    {
      "id": "677b762671b3c200003cd49e",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144422,
      "updated": 1736144422
    },
    {
      "id": "677b762871b3c200003cd49f",
      "text": "[https://ja.wikipedia.org/wiki/Wayland Wayland - Wikipedia]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144425,
      "updated": 1736144427
    },
    {
      "id": "677b762b71b3c200003cd4a1",
      "text": "\t>Waylandプロトコルは、レンダリングAPIを含んでいない`[18]:7[8][24][25]`。その代わり、Waylandはダイレクトレンダリングモデルを採用している。ダイレクトレンダリングモデルでは、クライアントはウィンドウコンテンツをコンポジタと共有できるバッファへ描画しなければならない`[18]`:7。そのため、クライアントはCairoやOpenGLなどのライブラリを使って、自分自身ですべてをレンダリングすることも選択できる。あるいは、QtやGTKといった、Waylandをサポートする高位のウィジェットライブラリのレンダリングエンジンに頼ることもできる。クライアントは、特定のタスクをこなすために、オプションとしてその他の特化したライブラリを使用することもできる。たとえばフォントレンダリング(英語版)のためにFreeTypeを使用できる。 ",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144427,
      "updated": 1736144457
    },
    {
      "id": "677b768b71b3c200003cd4a4",
      "text": "\t(ry)",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144524,
      "updated": 1736144539
    },
    {
      "id": "677b768e71b3c200003cd4a5",
      "text": "\t>最も一般的なケースでは、クライアントがOpenGL、OpenGL ES、Vulkanといったハードウェア(GPU)アクセラレーションのためのAPIを使って、ビデオメモリバッファへ直接レンダリングする。クライアントとコンポジタは、このGPU空間のバッファを参照するための特別なハンドラを用いて共有できる[26]。この方法は、コンポジタに余計なデータコピーをしないようにする。結果として、グラフィックパフォーマンスは向上し、よりよい方法である。コンポジタはAPIクライアントとして、同じハードウェアアクセラレーションAPIを使って、ディスプレイへ描画する最終的なシーンのコンポジションをかなり最適化できる。 ",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144526,
      "updated": 1736144530
    },
    {
      "id": "677b764c71b3c200003cd4a2",
      "text": "\t\tハードウェアアクセラレーションが前提になってるのか[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144461,
      "updated": 1736144582
    },
    {
      "id": "677b868971b3c20000a62ebf",
      "text": "\t(ry)",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736148617,
      "updated": 1736148619
    },
    {
      "id": "677b868b71b3c20000a62ec0",
      "text": "\t>作者であるKristian Høgsbergは、LinuxのグラフィックとX.Orgの開発者であり、以前はAIGLXとDRI2で勤務していた。Red Hatで勤務しているとき、2008年の空いた時間のプロジェクトとしてWaylandの開発を始めた`[125][126][127][128]`。最初の目標は、\"すべてのフレームは完璧である、つまり、それによってアプリケーションは、テアリング、ラグ、再描画、ちらつきを二度と目にしないよう十分にレンダリングをコントロールできる\"システムであった。根底となるコンセプトが\"固まった\"とき、Høgsbergはちょうどマサチューセッツ州Wayland(英語版)の街を運転していたため、その名前がつけられた`[127][129]`。 ",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736148619,
      "updated": 1736148635
    },
    {
      "id": "677b762971b3c200003cd4a0",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736144426,
      "updated": 1736144426
    }
  ]
}