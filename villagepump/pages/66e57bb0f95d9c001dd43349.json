{
  "id": "66e57bb0f95d9c001dd43349",
  "title": "例外は必要か？",
  "created": 1726315442,
  "updated": 1736518235,
  "lines": [
    {
      "id": "66e57bb0f95d9c001dd43349",
      "text": "例外は必要か？",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1726315442,
      "updated": 1726315442
    },
    {
      "id": "678113fb71b3c20000021ad8",
      "text": "#例外 #例外処理",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736512508,
      "updated": 1736512524
    },
    {
      "id": "6781140271b3c20000021ad9",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736512515,
      "updated": 1736512515
    },
    {
      "id": "678114db71b3c20000021ada",
      "text": "タイトルが間違ってる？",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736512731,
      "updated": 1736512751
    },
    {
      "id": "678114ef71b3c20000021add",
      "text": "\t例外システムをtry~catchですべきかEitherですべきかという話っぽい",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736512752,
      "updated": 1736512779
    },
    {
      "id": "67812a3c7838e30000ad8ce9",
      "text": "\t[例外は必要か？]というタイトルだと文脈が読み取れないので変えた方が伝わりやすい気がします[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1736518203,
      "updated": 1736518235
    },
    {
      "id": "678114dd71b3c20000021adb",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736512734,
      "updated": 1736512734
    },
    {
      "id": "6781166771b3c20000021b90",
      "text": "[ai.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513128,
      "updated": 1736513132
    },
    {
      "id": "678115b671b3c20000021afc",
      "text": ">[try ... catch]による例外処理と[Either]型による例外処理の比較について、星取表を作成し、それぞれの特徴を説明します。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736512950,
      "updated": 1736513388
    },
    {
      "id": "6781160871b3c20000021b74",
      "text": "table:比較表",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513045
    },
    {
      "id": "6781160871b3c20000021b75",
      "text": " 特徴\ttry~catch\tEither型",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513105
    },
    {
      "id": "6781160871b3c20000021b77",
      "text": " 処理の流れの明確さ\t★☆☆\t★★★",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513120
    },
    {
      "id": "6781160871b3c20000021b78",
      "text": " 非同期プログラミングとの相性\t★☆☆\t★★★",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513119
    },
    {
      "id": "6781160871b3c20000021b79",
      "text": " 型チェックの適用\t★☆☆\t★★★",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513117
    },
    {
      "id": "6781160871b3c20000021b7a",
      "text": " 値としての扱いやすさ\t★☆☆\t★★★",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513115
    },
    {
      "id": "6781160871b3c20000021b7b",
      "text": " 関数型プログラミングとの相性\t★☆☆\t★★★",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513114
    },
    {
      "id": "6781160871b3c20000021b7c",
      "text": " 副作用を持つ関数での使用\t★★★\t★☆☆",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513112
    },
    {
      "id": "6781160871b3c20000021b7d",
      "text": "> ## 説明",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b7e",
      "text": "> 1. try~catchによる例外処理:",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b7f",
      "text": ">    - 処理の流れが分かりにくくなる傾向があります`[1]`。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b80",
      "text": ">    - 非同期プログラミングでの扱いが難しいです`[1]`。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b81",
      "text": ">    - 型チェックが動作しないため、コンパイル時のエラー検出が困難です`[1]`。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b82",
      "text": "> 2. Either型による例外処理:",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b83",
      "text": ">    - 処理の流れが明確で、エラーを値として扱えるため、後で処理することが可能です`[4]`。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b84",
      "text": ">    - map や flatMap などの操作を使用でき、関数型プログラミングと相性が良いです`[4]`。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b85",
      "text": ">    - 型チェックが適用されるため、コンパイル時にエラーを検出しやすくなります`[1]`。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b86",
      "text": "> Either型を使用する場合、Lintツールを活用することで、正しく例外処理されていない箇所を警告することができます。例えば、return-type/enforce-access というESLintルールを使用すると、特定の型（この場合はEither型のエラー）が使用されずに捨てられている箇所を検出できます`[3]`。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b87",
      "text": "> これにより、開発者はエラーハンドリングの漏れを早期に発見し、より堅牢なコードを作成することができます。Either型と適切なLintルールを組み合わせることで、例外処理の品質を向上させることができるでしょう。",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b88",
      "text": "> Citations:",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b89",
      "text": "> `[1]` https://blog.mamansoft.net/2019/03/26/typescript-exception-with-either/",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b8a",
      "text": "> `[2]` https://qiita.com/xkent/items/7de92b10ffbcb2b7a257",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b8b",
      "text": "> `[3]` https://zenn.dev/knowledgework/articles/7ff389c5fe8f06",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b8c",
      "text": "> `[4]` https://qiita.com/koher/items/288f01cddb0bbb6aa4e1",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b8d",
      "text": "> `[5]` https://blog.shibayu36.org/entry/2015/08/31/103000",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b8e",
      "text": "> `[6]` https://blog.flutteruniv.com/flutter-fpdart-either/",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "6781160871b3c20000021b8f",
      "text": "> `[7]` https://qiita.com/shwld/items/f5f192ace0702d9156e2",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513033,
      "updated": 1736513033
    },
    {
      "id": "678115ae71b3c20000021adf",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736513008,
      "updated": 1736513008
    },
    {
      "id": "6781210171b3c20000021b93",
      "text": "例外のない言語",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736515844,
      "updated": 1736515849
    },
    {
      "id": "6781210871b3c20000021b94",
      "text": "\t[C言語]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736515852,
      "updated": 1736515856
    },
    {
      "id": "678120f871b3c20000021b91",
      "text": " [golang]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736515832,
      "updated": 1736515857
    },
    {
      "id": "6781211271b3c20000021b95",
      "text": " [haskell]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736515859,
      "updated": 1736515865
    },
    {
      "id": "678120f971b3c20000021b92",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1736515834,
      "updated": 1736515834
    }
  ]
}