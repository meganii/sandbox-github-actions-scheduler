{
  "id": "638c2b30fa51ef001d5f191b",
  "title": "ChatGPTに構文と慣習について説明を書かせた",
  "created": 1670130481,
  "updated": 1670148144,
  "lines": [
    {
      "id": "638c2b30fa51ef001d5f191b",
      "text": "ChatGPTに構文と慣習について説明を書かせた",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130484
    },
    {
      "id": "638c2b31aff09e0000e35c68",
      "text": "from [2022/12/04]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c69",
      "text": "ChatGPTに構文と慣習について説明を書かせる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c6a",
      "text": "[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c6b",
      "text": "\t「構文だったり慣習だったりする」という例としてLISPのハテナとかRubyの大文字とかPythonのアンダースコアとかについて解説できますか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c6c",
      "text": "\t[ChatGPT.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c6d",
      "text": "\t\t>LISP、Ruby、Pythonといったプログラミング言語には、構文や慣習として特徴的なものがいくつかあります。例えば、LISPではハテナ（#）が使われることがあります。これは、LISPでは、ハテナ以降の文字列をコメントとして扱います。つまり、プログラムを実行するときには、ハテナ以降の文字列は無視されるということです。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c6e",
      "text": "　　　そのシャープ記号はハテナではないし、LISPのコメントはセミコロンでは？[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2cede5172d00009ad186",
      "text": "　　　安定の適当説明笑う[yosider.icon]",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1670130926,
      "updated": 1670130961
    },
    {
      "id": "638c2b31aff09e0000e35c6f",
      "text": "  > 　Rubyでは、大文字から始まる名前が、特別な意味を持つ場合があります。例えば、SymbolやRangeなどは、Rubyで定義されたクラスやモジュールの名前です。また、大文字から始まる名前は、定数として扱われることがあります。定数は、プログラムの中で変更することはできません。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c70",
      "text": "　　　そう、それ>定数[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c71",
      "text": "　　　　大文字小文字にシステム上の意味があるので、他の言語からきて単なるネーミングだと思ってる人が驚く",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c72",
      "text": "  > 　Pythonでは、アンダースコア（_）が使われることがあります。Pythonでは、アンダースコアで始まる名前は、慣習的にはプライベートなものとされます。つまり、プログラムの外部からは参照できないものとされることが多いです。また、Pythonでは、アンダースコアで始まる名前は、慣習的に特別な意味を持つことがあります。例えば、__init__は、クラスのコンストラクタとして扱われます。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c73",
      "text": "  　ちょっと足りない。慣習的にプライベートになるのはその通りだが、[ネームマングリング]もある",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670148092
    },
    {
      "id": "638c2b31aff09e0000e35c74",
      "text": "\t>そのシャープ記号はハテナではないし、LISPのコメントはセミコロンでは？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c75",
      "text": "\t\t[https://gyazo.com/245f99890c03d3657e9d3047c171db0d]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c76",
      "text": "\t　　かなり怪しげなことを言ってるな[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c77",
      "text": "\tPythonでアンダースコアが慣習的にプライベートになるのはその通りだが、ネームマンダリングの話は？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c78",
      "text": "\t\t[https://gyazo.com/e5d44ce33c2b6b29ce879d1cdb0ffe75]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c79",
      "text": "\t\t[真っ赤な嘘]ですね[nishio.icon]",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1670130481,
      "updated": 1670130532
    },
    {
      "id": "638c2b31aff09e0000e35c7a",
      "text": "\t\t問題なくアクセスできます",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c7b",
      "text": " \t\tcode:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c7c",
      "text": " \t\t class MyClass:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c7d",
      "text": "        def __init__(self):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c7e",
      "text": "            self._x = 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c7f",
      "text": "    ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c80",
      "text": "    print(MyClass()._x)  # => 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c81",
      "text": "  ネームマングリングの例",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c82",
      "text": "  \tcode:python",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c83",
      "text": "  \t class MyClass:",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c84",
      "text": "        def __init__(self):",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c85",
      "text": "            self.__x = 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c86",
      "text": "    ",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c87",
      "text": "    # print(MyClass().__x)  # => AttributeError: 'MyClass' object has no attribute '__x'",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c88",
      "text": "    print(MyClass()._MyClass__x)  # => 1",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b31aff09e0000e35c89",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2b9faff09e0000e35c8b",
      "text": "[nishio.icon]LISPの末尾のクエッションマークにはどんな意味がありますか？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130592,
      "updated": 1670130593
    },
    {
      "id": "638c2ba1aff09e0000e35c8c",
      "text": "\t[https://gyazo.com/035f5deda81848878c08a107d0a57800]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130593,
      "updated": 1670130625
    },
    {
      "id": "638c2bbdaff09e0000e35c8d",
      "text": "　サンプルコードに記号を使ってないじゃないか！",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130622,
      "updated": 1670130750
    },
    {
      "id": "638c2c3daff09e0000691812",
      "text": "　正解: 関数名末尾のハテナは記号を関数名に含めることができるLISPの実装においてよく使われる慣習であり、その関数が真偽値を返すことを示している",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130750,
      "updated": 1670130927
    },
    {
      "id": "638c2d52aff09e0000e35c8e",
      "text": "　\t>Scheme の真偽判定関数はほとんど '?' で終わる名前を持っています。 [src https://www.shido.info/lisp/scheme5.html]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131027,
      "updated": 1670131044
    },
    {
      "id": "638c2b31aff09e0000e35c8a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670130481,
      "updated": 1670130481
    },
    {
      "id": "638c2d72aff09e0000691813",
      "text": "「著: ChatGPT、監修: 西尾泰和」で本が書けるのではと一瞬思ったけど、試してみて、現状だと僕が「デタラメを言うんじゃねえ！」と怒りながらほとんど書き直してしまう気がしたw",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131058,
      "updated": 1670131129
    },
    {
      "id": "638c2db9aff09e0000691815",
      "text": " まあ単位時間あたりのアウトプットは増えるだろうから生産性は向上するかも知れんw",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131129,
      "updated": 1670131156
    },
    {
      "id": "638c2dd5aff09e0000691816",
      "text": " でも[怒りドリブン]で活動するのは精神衛生に良くないからやりたくないw",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131157,
      "updated": 1670131218
    },
    {
      "id": "638c2defaff09e0000691817",
      "text": " まー、ホモサピエンスは怒らせるとアウトプット量が増えるってのは一般的に観測される性質ではあるかw",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131184,
      "updated": 1670131208
    },
    {
      "id": "638c2e13aff09e0000691818",
      "text": " 　[マクドナルド理論]の一般化だな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131219,
      "updated": 1670131230
    },
    {
      "id": "638c2e27aff09e0000691819",
      "text": " 　　[カニンガムの法則]か",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131239,
      "updated": 1670131246
    },
    {
      "id": "638c30aa6eb4060000873c78",
      "text": " 教えるのが[nishio.icon]さんで、AIの方が「こうですか？」みたいなシチュエーションなら成立しそう[inajob.icon]",
      "userId": "58442db3ee4a2400116eb406",
      "created": 1670131883,
      "updated": 1670131917
    },
    {
      "id": "638c7006aff09e00006dc817",
      "text": " 　[ChatGPTは質問をしてくれない]…[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670148103,
      "updated": 1670148144
    },
    {
      "id": "638c2d73aff09e0000691814",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131059,
      "updated": 1670131059
    },
    {
      "id": "638c2e42e5172d00009ad187",
      "text": "マンダリング→マングリング？",
      "userId": "5c30ba88e98efe0017e5172d",
      "created": 1670131267,
      "updated": 1670131273
    },
    {
      "id": "638c2e45e5172d00009ad188",
      "text": "　あっ、予測変換が誤変換を生んでる！[マングリング]が正しい[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131270,
      "updated": 1670131534
    },
    {
      "id": "638c2f49aff09e0000e35c8f",
      "text": "　\t[https://en.wikipedia.org/wiki/Name_mangling Name mangling - Wikipedia]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131529,
      "updated": 1670131532
    },
    {
      "id": "638c2f4caff09e0000e35c90",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1670131532,
      "updated": 1670131536
    }
  ]
}