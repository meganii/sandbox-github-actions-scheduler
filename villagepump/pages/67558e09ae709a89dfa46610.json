{
  "id": "67558e09ae709a89dfa46610",
  "title": "JS Nativeのsleep関数ほしい",
  "created": 1733660170,
  "updated": 1733664021,
  "lines": [
    {
      "id": "67558e09ae709a89dfa46610",
      "text": "JS Nativeのsleep関数ほしい",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660182
    },
    {
      "id": "67558e097838e300000e8fe1",
      "text": "from [ES2025]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe2",
      "text": "promise実装版より正確に制御できる[sleep関数]実装してくれ[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe3",
      "text": "\t（あんまり正確に制御できてしまうとユーザーのトラッキングに転用できてしまう問題があるかもだけど）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe4",
      "text": "\tそもそもC言語のsleep関数でもシステムコール呼んだりとかでオーバーヘッドあるしプロセスの切り替え間隔があるから無理では[bsahd.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe5",
      "text": "\t\tsleep前後でDate.now()して比較すればオーバーヘッドにかかった時間はわかる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe6",
      "text": "\t\t\t[javascriptのよく使うスニペット集]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe7",
      "text": "\t\t\tcode:js",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe8",
      "text": "\t\t\t\tfunction sleep(delay) {",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fe9",
      "text": "    \treturn new Promise((resolve, _) => {",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fea",
      "text": "    \t\tsetTimeout(resolve, delay);",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8feb",
      "text": "    \t});",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fec",
      "text": "    }",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fed",
      "text": "    const iter = new Array(1000).fill(1);",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660170,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8fee",
      "text": "    const a = performance.now();",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8fef",
      "text": "    function pump() {",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff0",
      "text": "        const a = iter.shift()",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff1",
      "text": "        if(typeof a == \"undefined\"){",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff2",
      "text": "            return;",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff3",
      "text": "        }",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff4",
      "text": "    \treturn sleep(0).then(pump);",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff5",
      "text": "    }",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff6",
      "text": "    pump().then(()=>{",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff7",
      "text": "        console.log(performance.now() - a)",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff8",
      "text": "    })",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660419,
      "updated": 1733660419
    },
    {
      "id": "67558e097838e300000e8ff9",
      "text": "\t\t\tパフォーマンスを測る際は[Date.now()]より[performance.now()]の方が良い[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8ffa",
      "text": "\t\t\t以前個人的に測った際は`sleep(0)`でも20ms~50msぐらいの遅延が発生していた（Node.jsで計測した場合）",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8ffb",
      "text": "\t\t\t\t2~3ms、時々16ms on Denoだよ[bsahd.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8ffc",
      "text": "\t\t\tというかGCがある原理上完全に無理[bsahd.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8ffd",
      "text": "\t\t\t既に読み込み済みの単一プロセスの処理を一定時間止めるのにそこまで遅延が発生する想像がつかないけど・・・[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8ffe",
      "text": "\t\t\t\tまあそういうものなんだろうな🤔",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e8fff",
      "text": "\t\t\tpromiseは別プロセスに分離しているので遅延が発生するのは仕方がない",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e9000",
      "text": "\t\t\t\tプロセスではないのでは[bsahd.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e9001",
      "text": "\t\t\t\t\tプロセス生成だとすると早すぎる",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e9002",
      "text": "\t\t\t\t\tスレッドすら作らずにマイクロタスクで擬似スレッドしてたのでは",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e9003",
      "text": "\t\t\t\t別スレッドかなんかだったかもしれないけれど忘れた[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e9004",
      "text": "\t\t\t\t\t何かしら別のタスクを生成していた記憶はある",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558e097838e300000e9005",
      "text": "\t\t\t\t\tそのあたりはググって",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    },
    {
      "id": "67558f7b71b3c2000077cee1",
      "text": "\t\t\t\tpromiseが嫌なら同期版もあるよ[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660539,
      "updated": 1733660558
    },
    {
      "id": "67558f8d71b3c2000077cee2",
      "text": "\t\t\t\t\tcode:js",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660558,
      "updated": 1733660558
    },
    {
      "id": "67558f8e71b3c2000077cee3",
      "text": "\t\t\t\t\t function sleep(delay) {",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077cee4",
      "text": "      \tconst before = performance.now();",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077cee5",
      "text": "      \twhile (performance.now() < before + delay) {",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077cee6",
      "text": "      \t\t// empty",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077cee7",
      "text": "      \t}",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077cee8",
      "text": "      }",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077cee9",
      "text": "      const iter = new Array(1000).fill(1);",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077ceea",
      "text": "      const a = performance.now();",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077ceeb",
      "text": "      for (const _ of iter) {",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077ceec",
      "text": "      \tsleep(1);",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077ceed",
      "text": "      }",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "67558f8f71b3c2000077ceee",
      "text": "      console.log(performance.now() - a);",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660559,
      "updated": 1733660559
    },
    {
      "id": "675590ef7838e3000075e346",
      "text": "     強引で草[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660912,
      "updated": 1733660919
    },
    {
      "id": "675590f77838e3000075e347",
      "text": "     \tめちゃくちゃな回数[performance.now()]呼ばれている気がするけれど、パフォーマンス的に問題ないのかな？",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660920,
      "updated": 1733660942
    },
    {
      "id": "6755910e7838e3000075e348",
      "text": "     \t[https://gyazo.com/c63fd5081008ccb482c53cd605d129e4]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660942,
      "updated": 1733661005
    },
    {
      "id": "675591637838e3000075e34a",
      "text": "     \tパフォーマンス的に問題がないなら、精度もいいし使えそう",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733661028,
      "updated": 1733662825
    },
    {
      "id": "6755986971b3c2000077cef1",
      "text": "     \tあ、ちなみに他の処理(レンダリング含む)を全てブロックするし、CPU利用率も結構上がる[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733662825,
      "updated": 1733663975
    },
    {
      "id": "67558e097838e300000e9006",
      "text": "\t\t\t\t\t\t\t[ビジーウェイト]だから",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1733660170,
      "updated": 1733664021
    },
    {
      "id": "67558e097838e300000e9007",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1733660170,
      "updated": 1733660170
    }
  ]
}