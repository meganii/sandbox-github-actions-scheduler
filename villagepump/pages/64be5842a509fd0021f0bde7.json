{
  "id": "64be5842a509fd0021f0bde7",
  "title": "線形代数系の記法の流儀",
  "created": 1690196036,
  "updated": 1745675751,
  "lines": [
    {
      "id": "64be5842a509fd0021f0bde7",
      "text": "線形代数系の記法の流儀",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196198
    },
    {
      "id": "64be5844ed60e6000002e798",
      "text": "from [縮約記法を完全に理解したい]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e79a",
      "text": "記法の流儀と言えば、[Summer498.icon]は[行列を生で書く]のが嫌いなのでなんとか生で書かずに済むような記法を考える",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "680ce5e200000000006f4089",
      "text": "\t[行列を生で書きたくない]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1745675746,
      "updated": 1745675751
    },
    {
      "id": "64be5844ed60e6000002e79b",
      "text": "\t行列積の成分の計算を以下のように書いたりする",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e79c",
      "text": "\t\t[$ [C]_{i,k}=\\sum_j[A]_{i,j}[B]_{j,k} ]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e79d",
      "text": "\t\tこういう事を考えてると[縮約記法]を使いたくなってくる",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196060
    },
    {
      "id": "64be5844ed60e6000002e79e",
      "text": "\t\t[$ c_i^k=a_i^jb_j^k]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e79f",
      "text": "\t\t[行列を生で書く]とは？[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196078
    },
    {
      "id": "64be5844ed60e6000002e7a0",
      "text": "\t\t\tこういう感じで行列の各成分を書くこと ([俺語]) [Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a1",
      "text": " \t\t\t[$ \\begin{pmatrix}c_{00}&c_{01}&c_{02}&c_{03}\\\\c_{10}&c_{11}&c_{12}&c_{13}\\\\c_{20}&c_{21}&c_{22}&c_{23}\\\\c_{30}&c_{31}&c_{32}&c_{33}\\\\\\end{pmatrix}]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a2",
      "text": " \t なるほど[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a3",
      "text": " \t 主流は添字記法だから、結局生で書くことはほとんどなさそう",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a4",
      "text": "\t\t\tこれも生っぽい",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a5",
      "text": "\t\t\t\t[$ \\pmb a\\cdot\\pmb e_2=a_0\\pmb e_0\\cdot\\pmb e_2+a_1\\pmb e_1\\cdot\\pmb e_2+a_2\\pmb e_2\\cdot\\pmb e_2=0+0+a_2=a_2]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a6",
      "text": "\t\t\t\tここはわかりやすさのために、あえて具体的に書いたという意図だった[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a7",
      "text": "\t\t\t\t 最初は具体的な値を入れて考えるのがわかりやすい",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a8",
      "text": "\t\t\t\t\t\tこの考えの人は割りと多そう[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7a9",
      "text": "\t\t\t\t\t\t\t[Summer498.icon]は違ってて",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7aa",
      "text": "\t\t\t\t\t\t\t\t[$ \\bm a\\cdot\\bm e_j = \\sum_{i} a_{i}\\bm e_i\\cdot\\bm e_j=\\sum_i a_i\\delta_{i,j}=a_j]の方が何やってるのか分かりやすい",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7ab",
      "text": "\t\t\t\t\t\t\t\t式の構造は一般的に書くほうがもちろんわかりやすい[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7ac",
      "text": "\t\t\t\t\t\t\t\t検算するときや、何やってんだか意味の分からない式を調べるときは、まず[$ n=0,1,2\\cdots]と代入していって挙動を掴む",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7ad",
      "text": "\t\t\t\t\t\t\t\t\tココの違いが面白い[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7ae",
      "text": "\t\t\t\t\t\t\t\t\t\t[Summer498.icon]は式に成り立つ性質から一般形のまま理解しに行く",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7af",
      "text": "\t\t\t\t\t\t\t\t\t\tほへー[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b0",
      "text": "\t\t\t\t\t\t\t\t\tなんかうまい例ないかな[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b1",
      "text": "\t\t\t\t\t\t\t\t\t [/blu3mo-public/集合と写像#64bde9741286260000b206e1]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b2",
      "text": " \t\t\t\t\t\t\t\t\t[簡単な例からかんがえてみ]よってことだ",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b3",
      "text": " \t\t\t\t\t\t検算するときはどうするんだろう[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b4",
      "text": " \t\t\t\t\t\t 式の構造から検算できる場合([次元解析]など)もあるけど、それだけでカバーできる場合ばかりではない",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b5",
      "text": " \t\t\t\t\t\t 例えばある式Aを拡張した式A'を導出した時、A'に具体的な値を入れて式Aに戻るか確かめる、みたいなことをする",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b6",
      "text": " \t\t\t\t\t\t 物理なら、例えば傾斜を無限大にして壁にしたとき、直感的に予想される挙動(壁に沿った自由落下とか)になるか調べる",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b7",
      "text": "\t\t\t\t\t\t\t\t一般系のまま複数ルートで式変形していって合流すれば合ってるものと思う[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b8",
      "text": "\t\t\t\t     複数ルートある場合はそれでもいいか[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7b9",
      "text": "\t\t\t\t\t\t\t\tもっと言うと、具体化が必要でも最低限の具体化で検算してる気がする",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7ba",
      "text": "\t\t\t\t\t\t\t\t\t[クロネッカーのデルタ][$ \\delta_{i,j}]が使えるならそこで十分だと思ってみたり[Summer498.icon]",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1690196036,
      "updated": 1710547124
    },
    {
      "id": "64be5844ed60e6000002e7bb",
      "text": "\t\t\t\t\t\t\t\t\t具体化のレベルも色々ありますね[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7bc",
      "text": "\t\t\t\t\t\t\t\t\t 任意座標でのナブラの成分を導出した時、あっているかどうか不安だったので、座標系の具体例として極座標を代入して確かめたりした",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7bd",
      "text": "\t\t\t\tそのあと[Einsteinの総和規約]使っても大丈夫そうだったので、そっちで書いた",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be593aed60e6000002e7d3",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196281,
      "updated": 1690196282
    },
    {
      "id": "64be5844ed60e6000002e7c3",
      "text": "物理を勉強したら具体的な値を代入したくなるんだろうか",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7c4",
      "text": " 具体的な値を求めすぎてうんざりすることもある[takker.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7c5",
      "text": "\t 式ではなく値が答えなので、値からあっているかどうか判断ができない",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7c6",
      "text": "\t 　その分野の経験があれば、不自然に値が(大きい|小さい)という判断はできそうだが、微妙に食い違う場合は無理",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7c7",
      "text": "\t 計算をミスったらアウト",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7c8",
      "text": "\t \tこれが嫌で具体値の計算をなるべくしないようにしている気がする[Summer498.icon]",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7c9",
      "text": "\t \t\t最後まで式変形で導出してから数を代入する",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be5844ed60e6000002e7ca",
      "text": "\t こういうときは[Summer498.icon]さんの言う通り式の構造から判断できるほうがうれしい",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    },
    {
      "id": "64be590fed60e6000002e7d2",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196238,
      "updated": 1690196239
    },
    {
      "id": "64be5905ed60e6000002e7cd",
      "text": ">[Summer498.icon]は式に成り立つ性質から一般形のまま理解しに行く",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196228,
      "updated": 1690196228
    },
    {
      "id": "64be5905ed60e6000002e7ce",
      "text": "\tプログラムを書くときもそんな感じで書く気がする",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196228,
      "updated": 1690196228
    },
    {
      "id": "64be5905ed60e6000002e7cf",
      "text": "\t\t一般形のままプログラムを書く",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196228,
      "updated": 1690196228
    },
    {
      "id": "64be5905ed60e6000002e7d0",
      "text": "\t\t\t必要事項を適宜実行する",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196228,
      "updated": 1690196228
    },
    {
      "id": "64be5905ed60e6000002e7d1",
      "text": "\t\t[$ \\argmin_w]を含む式を実装する際にはそのまま`argmin(f,w)`と書く、必要なら`argmin(f,w)`を実装する",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196228,
      "updated": 1690196228
    },
    {
      "id": "680ce44900000000003ff552",
      "text": " \t\t[Commandパターン]に似ている",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1745675336,
      "updated": 1745675348
    },
    {
      "id": "680ce42100000000003ff550",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1745675296,
      "updated": 1745675335
    },
    {
      "id": "64be5844ed60e6000002e7cc",
      "text": "",
      "userId": "6436266c7ac3c0001bed60e6",
      "created": 1690196036,
      "updated": 1690196036
    }
  ]
}