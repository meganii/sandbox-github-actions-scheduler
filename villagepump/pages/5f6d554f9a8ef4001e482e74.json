{
  "id": "5f6d554f9a8ef4001e482e74",
  "title": "コンパイル時計算",
  "created": 1601000785,
  "updated": 1666397264,
  "lines": [
    {
      "id": "5f6d554f9a8ef4001e482e74",
      "text": "コンパイル時計算",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601000785,
      "updated": 1601000785
    },
    {
      "id": "5f6d55501280f00000f02151",
      "text": "programの[コンパイル]時に[計算]をやってしまうこと。",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1601000785,
      "updated": 1666358019
    },
    {
      "id": "5f6d55651280f00000f02157",
      "text": "[- 超絶長いコンパイル時間を犠牲に][* 実行時間ゼロ秒]という究極の処理速度を手にすることが出来る",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601000805,
      "updated": 1601000860
    },
    {
      "id": "5f6d55521280f00000f02152",
      "text": "　まったく関係ないけれど[詠唱破棄]を連想した[hatori.icon]",
      "userId": "62a91a7a083437001de60035",
      "created": 1601000787,
      "updated": 1666397263
    },
    {
      "id": "6353344fe600350000144c82",
      "text": " 　>詠唱破棄とは[魔法]等を[詠唱]なしで発動させることである。",
      "userId": "62a91a7a083437001de60035",
      "created": 1666397263,
      "updated": 1666397263
    },
    {
      "id": "6353344fe600350000144c83",
      "text": " 　[https://dic.nicovideo.jp/a/%E8%A9%A0%E5%94%B1%E7%A0%B4%E6%A3%84 詠唱破棄とは (エイショウハキとは) 単語記事 - ニコニコ大百科]",
      "userId": "62a91a7a083437001de60035",
      "created": 1666397263,
      "updated": 1666397263
    },
    {
      "id": "6353344fe600350000144c84",
      "text": "",
      "userId": "62a91a7a083437001de60035",
      "created": 1666397263,
      "updated": 1666397264
    },
    {
      "id": "5f6da6e8dd59fe00005bc187",
      "text": "コンパイラ最適化時の定数畳み込みでは処理しきれない部分について、その言語自身のサブセットを用いてコンパイル時に処理を行えるという感じか",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601021733,
      "updated": 1601021776
    },
    {
      "id": "5f6da6e9dd59fe00005bc188",
      "text": " 別の方法で事前計算を行って結果をソースコードに埋め込んだりするのと違って、パラメータが変わっても手動で再計算しなくていいし、一つのソースコードで済むから保守性が高い?",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601021734,
      "updated": 1601021922
    },
    {
      "id": "5f6da76add59fe00005bc189",
      "text": " そういう利点もある",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601021863,
      "updated": 1601022788
    },
    {
      "id": "5f6dab4e1280f000002e1bf5",
      "text": "",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601022799,
      "updated": 1601022799
    },
    {
      "id": "5f6dabc11280f000002e1bf6",
      "text": "[- 頭のおかしい]先人たちは[* コンパイル時レイトレーシング]や[* コンパイル時Cコンパイラ]などを開発している",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601022914,
      "updated": 1601022974
    },
    {
      "id": "5f6dabfd1280f000002e1bf7",
      "text": "\t[https://www.slideshare.net/GenyaMurakami/constexpr-29223898 すごい constexpr たのしくレイトレ！]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601022974,
      "updated": 1601022987
    },
    {
      "id": "5f6dab3e1280f000002e1bf3",
      "text": " [http://kw-udon.hatenablog.com/entry/2016/12/03/201722 コンパイル中にコンパイルする「コンパイル時Cコンパイラ」をつくった話 - kw-udonの日記]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601022783,
      "updated": 1601023062
    },
    {
      "id": "5f6dac0c1280f000002e1bf8",
      "text": "",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601022988,
      "updated": 1601022988
    },
    {
      "id": "5f6dac811280f000002e1bfc",
      "text": "副産物",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601023106,
      "updated": 1601023109
    },
    {
      "id": "5f6dac841280f000002e1bfe",
      "text": "\tコンパイル時に[単体テスト]出来る",
      "userId": "60508ed36a7abc00235e90c0",
      "created": 1601023109,
      "updated": 1666358012
    },
    {
      "id": "5f6dac921280f000002e1bff",
      "text": "\t\t[static_assert]という、コンパイル時に警告を出してくれる命令を使う",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601023123,
      "updated": 1601023158
    },
    {
      "id": "5f6dacb81280f000002e1c00",
      "text": "\t\t尤も最近のプログラミング環境はビルドと一緒にテストを走らせてくれるので、大した利点ではない",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601023161,
      "updated": 1601023211
    },
    {
      "id": "5f6dac841280f000002e1bfd",
      "text": "",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1601023109,
      "updated": 1601023109
    },
    {
      "id": "5f6daf4edd59fe0000557933",
      "text": "RustやHaskellだとコンパイル時にIO処理すらできるのか…",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601023883,
      "updated": 1601023922
    },
    {
      "id": "5f6daf56dd59fe0000557935",
      "text": "\thttps://github.com/launchbadge/sqlx",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601023891,
      "updated": 1601023896
    },
    {
      "id": "5f6daf5cdd59fe0000557936",
      "text": "\t\tコンパイル時にSQLの構文チェックと型付けを行うRustのライブラリ",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601023896,
      "updated": 1601023920
    },
    {
      "id": "5f6daff5dd59fe0000557939",
      "text": "\t\tデータベースにアクセスしてテーブルの型情報を取ってくる",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601024050,
      "updated": 1601024063
    },
    {
      "id": "5f6daf4edd59fe0000557934",
      "text": " [Language.Haskell.TH https://hackage.haskell.org/package/template-haskell-2.16.0.0/docs/Language-Haskell-TH.html#v:runIO]",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601023883,
      "updated": 1601023958
    },
    {
      "id": "5f6daf98dd59fe0000557937",
      "text": " 完全に任意のコードを実行できるので「すごさ」はないけど",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601023957,
      "updated": 1601024028
    },
    {
      "id": "5f6dafd3dd59fe0000557938",
      "text": "",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1601024016,
      "updated": 1601024016
    },
    {
      "id": "5f6df7924daa92000000d1e9",
      "text": "ちょっと違うかもしれないけど、TypeScriptはコンパイル時?にSQLを型レベルで実行できる(ようになるらしい)",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1601042323,
      "updated": 1601042354
    },
    {
      "id": "5f6df7b44daa92000000d1eb",
      "text": "\thttps://twitter.com/suin/status/1309289448270491650",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1601042357,
      "updated": 1601042383
    },
    {
      "id": "5f6df7934daa92000000d1ea",
      "text": "",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1601042323,
      "updated": 1601042323
    }
  ]
}