{
  "id": "6064fdeb3ece53001c4bd296",
  "title": "貧民的プログラミング",
  "created": 1617231340,
  "updated": 1658646886,
  "lines": [
    {
      "id": "6064fdeb3ece53001c4bd296",
      "text": "貧民的プログラミング",
      "userId": "6055950b87138f0022246f59",
      "created": 1617231340,
      "updated": 1617231340
    },
    {
      "id": "6064fdec246f590000f64a09",
      "text": "⇔[富豪的プログラミング]",
      "userId": "6055950b87138f0022246f59",
      "created": 1617231340,
      "updated": 1617231380
    },
    {
      "id": "6064fe1b246f590000f64a0c",
      "text": "",
      "userId": "6055950b87138f0022246f59",
      "created": 1617231388,
      "updated": 1617231393
    },
    {
      "id": "6064fe22246f590000f64a0d",
      "text": "組み込みの世界はこっち寄り?",
      "userId": "6055950b87138f0022246f59",
      "created": 1617231395,
      "updated": 1617231408
    },
    {
      "id": "6064fdee246f590000f64a0a",
      "text": " 常に限られたリソースの中で最大のパフォーマンスを追求する",
      "userId": "6055950b87138f0022246f59",
      "created": 1617231342,
      "updated": 1617231450
    },
    {
      "id": "625569a9774b170000eaccc5",
      "text": "[パフォーマンスチューニング]もこっち",
      "userId": "59fb21121207900012774b17",
      "created": 1649764778,
      "updated": 1649764796
    },
    {
      "id": "6064fe3c246f590000f64a0e",
      "text": "",
      "userId": "6055950b87138f0022246f59",
      "created": 1617231420,
      "updated": 1617231420
    },
    {
      "id": "6065e3dcdb62ad00005e0ab3",
      "text": "富豪的に書かれているプログラムを組み込み機器に無理やり移植するとまあいろんなことが起きる",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290203,
      "updated": 1617290240
    },
    {
      "id": "6065e3e1db62ad00005e0ab4",
      "text": "　[yanma.icon]が昔Arduinoの文字列クラスを使ってプログラムを書いていると、あちこちで文字が欠ける現象が起きた",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290208,
      "updated": 1617290603
    },
    {
      "id": "6065e45edb62ad00005e0ab6",
      "text": "　メモリ破壊でもしてるのかなと思って調べたら、代入/初期化演算子がオーバーロードされてて毎回allocとcopyを発生させてた",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290333,
      "updated": 1617290398
    },
    {
      "id": "6065e496db62ad00005e0ab7",
      "text": "　そしてそいつがallocに失敗したときに無言でNULLを突っ込んでるのが文字欠けの原因だった",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290388,
      "updated": 1617290426
    },
    {
      "id": "6065e4c5db62ad00005e0ab8",
      "text": "　メモリを4GBぐらい詰んでいたら小さな文字列ぐらいではallocに失敗することはほとんどないけど、組み込みマイコンだとリソース管理をミスると普通に失敗する",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290436,
      "updated": 1617290784
    },
    {
      "id": "6065e50ddb62ad00005e0ab9",
      "text": "　code: c++",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290508,
      "updated": 1617290513
    },
    {
      "id": "6065e512db62ad00005e0aba",
      "text": "　 String str = \"hogehoge\";",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290513,
      "updated": 1617290513
    },
    {
      "id": "6065e513db62ad00005e0abb",
      "text": "　みたいなコードでエラーも警告もなくいきなりstrにNULLが入る",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290514,
      "updated": 1617290528
    },
    {
      "id": "6065e544db62ad00005e0abc",
      "text": "　　文法的には合ってるのでなかなか解析するのが大変だった",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290563,
      "updated": 1617290586
    },
    {
      "id": "6065e406db62ad00005e0ab5",
      "text": "　ソフトをどのぐらい富豪的に書くかというのは与えられているリソースと作ろうとしているものの規模によって変わってくるので、設計センスが問われるところと思う",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617290245,
      "updated": 1617291027
    },
    {
      "id": "6065e6eddb62ad00000290db",
      "text": "　　[犬小屋]つくるのに[ブルドーザー]使おうとしてないか？",
      "userId": "62a91a7a083437001de60035",
      "created": 1617290988,
      "updated": 1658646886
    },
    {
      "id": "6065e701db62ad00000290dc",
      "text": "　　[割り箸]で[金閣寺]作ろうとしてないか？",
      "userId": "62a91a7a083437001de60035",
      "created": 1617291008,
      "updated": 1658646881
    },
    {
      "id": "6065e708db62ad00000290dd",
      "text": "\t　　みたいなことをよく自問している",
      "userId": "5b8d55ab7d11180014db62ad",
      "created": 1617291015,
      "updated": 1617291022
    },
    {
      "id": "6255b43cd1a02f0000959cf1",
      "text": "",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649783870,
      "updated": 1649783871
    },
    {
      "id": "6255b458d1a02f0000959cf2",
      "text": "メモリを削るために乱数を使うとか、いろいろテクニックを使う世界。[hata6502.icon]",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649783897,
      "updated": 1649784082
    },
    {
      "id": "6255b51cd1a02f0000959cf5",
      "text": "　乱数で迷路を生成。",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649784093,
      "updated": 1649784382
    },
    {
      "id": "6255b595d1a02f0000959cf8",
      "text": "　消耗品をゲームで表現するために、道具の使用回数を記録しない。",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649784214,
      "updated": 1649793410
    },
    {
      "id": "6255b5edd1a02f0000959cf9",
      "text": "　　「運が悪いと道具が壊れる」ことにしてしまえば、１バイトメモリ削れる。",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649784302,
      "updated": 1649791639
    },
    {
      "id": "6255b561d1a02f0000959cf7",
      "text": "面白いアイデアが思いつくこともある。",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649784162,
      "updated": 1649784406
    },
    {
      "id": "6255b655d1a02f0000959cfc",
      "text": "しかし、人間よりも機械の都合が大きくなりがち。",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649784406,
      "updated": 1649784414
    },
    {
      "id": "6255b542d1a02f0000959cf6",
      "text": "",
      "userId": "5ff4fb2169e764001cd1a02f",
      "created": 1649784131,
      "updated": 1649784131
    }
  ]
}