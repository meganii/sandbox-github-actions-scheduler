{
  "id": "5fb50cdbb99c430023d883f6",
  "title": "You Don't Need Class",
  "created": 1605700833,
  "updated": 1732693521,
  "lines": [
    {
      "id": "5fb50cdbb99c430023d883f6",
      "text": "You Don't Need Class",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605700833,
      "updated": 1605700833
    },
    {
      "id": "5fb50d204daa920000315f7b",
      "text": "ほとんどの場合に[クラス]を使う必要がないように感じる",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605700896,
      "updated": 1614179406
    },
    {
      "id": "5fb50d274daa920000315f7c",
      "text": "\tクラスを使うことが目的化していて、何も恩恵を受けられていないように感じ始めた",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605700903,
      "updated": 1605701031
    },
    {
      "id": "5fb59953dd59fe0000b0b09c",
      "text": "\t\tデータ型を定義できてそれに関連する関数をまとめられるというだけでも十分な恩恵の気がする",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1605736787,
      "updated": 1605737674
    },
    {
      "id": "5fb59b76dd59fe0000b0b09d",
      "text": "\t\t\tそこから[継承]をなくし、[多態性]を実現するために[trait]を使うようになると[Rust]になる",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1605737335,
      "updated": 1614179435
    },
    {
      "id": "5fb59daf4bb2e20000a814ad",
      "text": "\t\t\tこれが本質で継承は方法論の一つでしかないと思う",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1605737904,
      "updated": 1605737980
    },
    {
      "id": "5fb59dfe4bb2e20000a814ae",
      "text": "\t\t\t 継承しか見ていないと必須のように思い込んでしまうバグがある",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1605737984,
      "updated": 1605738019
    },
    {
      "id": "62614128774b1700002fa4de",
      "text": "\t\t\tクラスを使うとき別に継承を使う必要はない。使うときは考え抜いた末に使う[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1650540840,
      "updated": 1650540922
    },
    {
      "id": "5fb50d914daa920000315f7d",
      "text": " クラスが無くても十分コードが書けるというのを[LISP]から教わった",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605701010,
      "updated": 1614179450
    },
    {
      "id": "5fb5103f4bb2e200004cfaf6",
      "text": "  LISPやるまではJavaとかPythonとかの経験しかなかったからOOP信者になりかけてた[kuuote.icon]",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1605701696,
      "updated": 1605738553
    },
    {
      "id": "6715ca5a4e93b100003374f5",
      "text": " 　こういうエントリ皆立てる世の中になったのみる度に関数型言語流行ってくれてよかったと思う[rtree.icon]",
      "userId": "66ec10e5f6246b001c4e93b1",
      "created": 1729481304,
      "updated": 1729481415
    },
    {
      "id": "5fb5100c4bb2e200004cfaf5",
      "text": "",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1605701645,
      "updated": 1605701645
    },
    {
      "id": "5fb5a2fe4daa92000055287b",
      "text": "クラスの恩恵が受けられるケース？",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739262,
      "updated": 1605739356
    },
    {
      "id": "5fb5a3224daa92000055287e",
      "text": " [内部状態]を持つとき",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739298,
      "updated": 1614179456
    },
    {
      "id": "5fb5a36a4daa92000055287f",
      "text": "  ただし作りがひどいと「それ外で状態持ったほうが良くない？」になる",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739371,
      "updated": 1605739423
    },
    {
      "id": "5fb5a3c04daa920000552880",
      "text": " 多くのオブジェクトが作られるとき",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739456,
      "updated": 1605739489
    },
    {
      "id": "5fb5a3e14daa920000552882",
      "text": "  1つ程度なら大して問題にならないけど、何個もあると\"どれが何なのか\"が分かりずらくなってしまう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739490,
      "updated": 1605739757
    },
    {
      "id": "5fb5a4d74daa920000552883",
      "text": " 多態性を実現するとき",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739736,
      "updated": 1605739793
    },
    {
      "id": "5fb5a5114daa920000552884",
      "text": "  データ+関数の組み合わせだと、同じネームスペースで関数名が衝突してしまって同じにできない",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739793,
      "updated": 1605740040
    },
    {
      "id": "5fb5a56f4daa920000552887",
      "text": "  nominal typeがあって、その型に対してoverloadできるような言語は例外",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739887,
      "updated": 1605739972
    },
    {
      "id": "5fb5a5c44daa92000055288a",
      "text": "  \tむしろそんな言語にはクラスがない気もする",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739972,
      "updated": 1605740010
    },
    {
      "id": "5fb5a63c4daa92000055288d",
      "text": "  そもそも同じ名前で異なる処理をするべきではないという過激的な考え方もできそう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740092,
      "updated": 1605740169
    },
    {
      "id": "5fb5a68b4daa92000055288e",
      "text": "   特定の性質を満たすデータだけ受け取るようにすればある程度は実用的じゃないかな",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740171,
      "updated": 1605740576
    },
    {
      "id": "5fb5ff071280f00000ac22fd",
      "text": "    これをやるのが[template (C++)]や[concept (C++20)]の発想",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1605762823,
      "updated": 1605762852
    },
    {
      "id": "5fb5ff261280f00000ac22fe",
      "text": "    特定の条件さえ満たしていれば、どんな実装であっても同じ処理を適用できるようにする",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1605762855,
      "updated": 1605832442
    },
    {
      "id": "5fb5ff5f1280f00000ac22ff",
      "text": "     [数学的構造]の発想でもある",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1605762912,
      "updated": 1605762931
    },
    {
      "id": "5fb5a7264daa92000055288f",
      "text": "   `add = arr => arr[0] + arr[1]`には`[1, 2]`、`['a', 'b']`を渡しても意味のある処理ができる",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740326,
      "updated": 1605740471
    },
    {
      "id": "5fb5a8084daa920000552891",
      "text": "   これも一種の多態性じゃないか？(どっちかというと多相？)",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740552,
      "updated": 1605740568
    },
    {
      "id": "5fb5a83b4daa920000552892",
      "text": "\t頭悪い人がプログラミングするとき",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1605740603,
      "updated": 1729465226
    },
    {
      "id": "67158b9679d3a90000c121c6",
      "text": "\t\tこういう概念つくって、こういうの持たせて、こいつとこいつをやりとりさせて、みたいな感じで少しずつ構築していける",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465241,
      "updated": 1729465262
    },
    {
      "id": "67158bb179d3a90000c121c8",
      "text": "\t\t頭いい人は手続き的にガッと書いたり、構造体+αくらいの「まとめる力」で上手くやれるけど",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465269,
      "updated": 1729465308
    },
    {
      "id": "67158bb079d3a90000c121c7",
      "text": "\t\t設計レベルで概念的に「理解しやすいように」つくれるから本当に助かっている[sta.icon]",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465267,
      "updated": 1729465339
    },
    {
      "id": "67158bdc79d3a90000c121c9",
      "text": "\t\t\tクラス含めて、OOPのおかげで、自分で書いた数千行以上のコードも扱えるようになった",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465311,
      "updated": 1729465338
    },
    {
      "id": "67158bfc79d3a90000c121ca",
      "text": "\t\t\t手続きとか単純にまとめる機能だけでは1000～2000くらいでギブだった（学生時代どうしてもこの壁を越えられなかった）",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465343,
      "updated": 1729465586
    },
    {
      "id": "6715db4d79d3a90000fb71eb",
      "text": "\t認知資源を減らしたいとき",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729485648,
      "updated": 1729485728
    },
    {
      "id": "67158c5079d3a90000c121cc",
      "text": "\t\tクラスつくれば隠蔽できる",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465427,
      "updated": 1729465440
    },
    {
      "id": "67158cd679d3a90000c121d0",
      "text": "\t\t\tしやすい",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465561,
      "updated": 1729465563
    },
    {
      "id": "67158c9b79d3a90000c121ce",
      "text": "\t\t業務レベルの複雑なプログラミングになると[助かる助かるマダガスカル][sta.icon]",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465502,
      "updated": 1729465555
    },
    {
      "id": "67158b7e79d3a90000c121c4",
      "text": "",
      "userId": "5a4873ab2e26fb001479d3a9",
      "created": 1729465217,
      "updated": 1729465217
    },
    {
      "id": "5fb5a83b4daa920000552893",
      "text": "[オブジェクト指向]の限界？",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740603,
      "updated": 1605745856
    },
    {
      "id": "5fb5a8494daa920000552894",
      "text": " 処理の共通化が(意識的に)妨げられてしまう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740617,
      "updated": 1605740660
    },
    {
      "id": "5fb5a8744daa920000552895",
      "text": "  データと関連する関数が1つのクラスにまとめられたものとして提供されるから手を入れずらくなってしまう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740660,
      "updated": 1605740884
    },
    {
      "id": "626141c6774b1700002fa4e0",
      "text": "   これは目的の一つだから目的が達成されている[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1650540999,
      "updated": 1650541017
    },
    {
      "id": "5fb5a95c4daa920000723b16",
      "text": "  得にクラスを使っている側から見ると、クラスは\"完成したもの\"として見えてしまう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605740892,
      "updated": 1605741003
    },
    {
      "id": "5fb5a9d94daa920000552896",
      "text": "  同じ処理は関数にまとめるという原則がままならくなってしまう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605741017,
      "updated": 1605741064
    },
    {
      "id": "626141f5774b1700002fa4e1",
      "text": "   どういう意味だろう？[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1650541045,
      "updated": 1650541053
    },
    {
      "id": "5fb5aa0c4daa920000552898",
      "text": "  クラスに手を付けられない/付けずらい場合のほかに、メソッドに書くほど汎用的な処理じゃない場合とか",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605741068,
      "updated": 1605741157
    },
    {
      "id": "5fb5c7454daa920000b7a0a2",
      "text": "  「クラスをどう使うか」に囚われてしまう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605748549,
      "updated": 1605748566
    },
    {
      "id": "5fb5a5374daa920000552886",
      "text": "\t専門的で大きな機能を作ってしまいやすくなる？",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605739831,
      "updated": 1605750923
    },
    {
      "id": "5fb5d0784daa920000ffd44d",
      "text": "\t\t[汎用的な小さな機能]の真逆",
      "userId": "6055950b87138f0022246f59",
      "created": 1605750905,
      "updated": 1621089188
    },
    {
      "id": "5fb5d07d4daa920000ffd44e",
      "text": "\t\tもちろんクラスを使っても移譲したりして、小さな機能を組み合せることはできるけど、少し複雑になってしまう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605750909,
      "updated": 1605751093
    },
    {
      "id": "5fb5d1384daa920000ffd44f",
      "text": "\t\t 状態や関連関数を合わせたオブジェクトよりも、関数自体を組み合せるほうがシンプル",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605751096,
      "updated": 1605751194
    },
    {
      "id": "62614219774b1700002fa4e2",
      "text": "\t\t  な時もあるけど、常にってことじゃないですような？[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1650541082,
      "updated": 1650541112
    },
    {
      "id": "5fb5d0674daa920000ffd44c",
      "text": "",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605750887,
      "updated": 1605751169
    },
    {
      "id": "5fb511854daa920000df53ca",
      "text": "class-free オブジェクト指向なるものが",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605702021,
      "updated": 1605702857
    },
    {
      "id": "5fb5142e4bb2e20000984dc1",
      "text": " JavaScriptのことかな？",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1605702703,
      "updated": 1605702715
    },
    {
      "id": "6714d97d71b3c200004818c2",
      "text": " \tJavascriptもclass実装されました",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1729419646,
      "updated": 1729419655
    },
    {
      "id": "5fb514404bb2e20000984dc2",
      "text": " [prototype]なんもわからん",
      "userId": "5e8944948a182900174bb2e2",
      "created": 1605702721,
      "updated": 1614178408
    },
    {
      "id": "5fb511864daa920000df53cb",
      "text": "\t\tprototypeは結局クラスとあんまり変わらないような気が",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605702023,
      "updated": 1605703950
    },
    {
      "id": "5fb519004daa920000df53cc",
      "text": "\t\tいやメソッドをあと付けできるという点では違うか",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605703936,
      "updated": 1605703971
    },
    {
      "id": "5fb519164daa920000df53cd",
      "text": "",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605703958,
      "updated": 1605703958
    },
    {
      "id": "5fb5196d4daa920000df53ce",
      "text": "そもそもオブジェクト指向の必要条件ってなんだろう",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605704045,
      "updated": 1605704055
    },
    {
      "id": "5fb519774daa920000df53d0",
      "text": "\tクラスがない[Go],[Rust](のドキュメント)でもオブジェクト指向と言っているから、おそらくクラスは必要条件ではない",
      "userId": "5bc5772df30ff700134daa92",
      "created": 1605704055,
      "updated": 1614179523
    },
    {
      "id": "603669a88ee92a00003be74f",
      "text": "\tGoとかRustとかってクラスみたいなの無いんですか? [増井俊之.icon]",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178729,
      "updated": 1614178745
    },
    {
      "id": "5fb597f2dd59fe0000b0b099",
      "text": "",
      "userId": "5f3cf18043ed94001edd59fe",
      "created": 1605736435,
      "updated": 1605736460
    },
    {
      "id": "6036687d8ee92a00003be747",
      "text": "[オブジェクト指向]とは何ぞや? みたいな議論が昔は盛んでしたね [増井俊之.icon]",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178429,
      "updated": 1614178566
    },
    {
      "id": "6036689d8ee92a00003be749",
      "text": " 1980年代ぐらい?",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178461,
      "updated": 1614178582
    },
    {
      "id": "603668cf8ee92a00003be74b",
      "text": " [OOPSLA]が超にぎわってたし、日本でもWOOCという学会やってたりした",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178512,
      "updated": 1614178622
    },
    {
      "id": "603668ec8ee92a00003be74c",
      "text": "  でも最近は流行してない...",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178541,
      "updated": 1614178552
    },
    {
      "id": "603669448ee92a00003be74d",
      "text": "  1990年のOOPSLAに行ってみたら賑わいっぷりに超驚いた [増井俊之.icon]",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178628,
      "updated": 1614178653
    },
    {
      "id": "603668af8ee92a00003be74a",
      "text": " classよりprototypeがイイ! みたいな論文が1980年代に出てたりしたし",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178479,
      "updated": 1614178503
    },
    {
      "id": "671e3b4e71b3c200000a00e6",
      "text": " \tprototypeはメモリ消費量を抑えられる[who.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1730034510,
      "updated": 1732693509
    },
    {
      "id": "6746cde971b3c20000c2c71b",
      "text": " \t\tprototypeのclass構文がいいかも",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1732693483,
      "updated": 1732693521
    },
    {
      "id": "6036688e8ee92a00003be748",
      "text": "",
      "userId": "566fa156776c9b11008ee92a",
      "created": 1614178446,
      "updated": 1614178446
    }
  ]
}