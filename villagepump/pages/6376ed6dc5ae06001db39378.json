{
  "id": "6376ed6dc5ae06001db39378",
  "title": "ActivityPub",
  "created": 1668738416,
  "updated": 1669113690,
  "lines": [
    {
      "id": "6376ed6dc5ae06001db39378",
      "text": "ActivityPub",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668738416,
      "updated": 1668738416
    },
    {
      "id": "63781c60aff09e00003160bc",
      "text": "[https://gyazo.com/28b76540c1d91aa8dbb74aee0260a0c1]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668815969,
      "updated": 1668815976
    },
    {
      "id": "63781c68aff09e00003160bf",
      "text": "https://github.com/w3c/activitypub",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668815976,
      "updated": 1668815985
    },
    {
      "id": "63781c60aff09e00003160be",
      "text": "\tW3C勧告: [ActivityPub https://www.w3.org/TR/activitypub/]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668815969,
      "updated": 1668816085
    },
    {
      "id": "6376ed6e79e113000072c1b9",
      "text": " [Mastodon], [Fedibird], [GNU Social]などの[Fediverse]的Twitterを相互接続するためのプロトコル",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668738416,
      "updated": 1668738481
    },
    {
      "id": "6376ed9379e113000072c1bb",
      "text": "",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668738451,
      "updated": 1668738451
    },
    {
      "id": "63781c9aaff09e00003160c1",
      "text": "[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668816026,
      "updated": 1668816026
    },
    {
      "id": "63781c9baff09e00003160c2",
      "text": "\t昔RSSの時代には更新情報が発信者側のOUTBOXに置かれて読者側のRSSリーダー側がGETしてた、それからSlack通知の時代が来て発信者側のサービスがSlackのAPIにPOSTをするようになった、でも間のキューをどちらかのサービスに密結合なものとして考えるのはやめようよ、ということなのかな？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668816027,
      "updated": 1668816096
    },
    {
      "id": "637ca6e2aff09e000046d480",
      "text": "\t[RSSリーダー]と[Webhook]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1669113570,
      "updated": 1669113606
    },
    {
      "id": "637c92f4aff09e0000ac7c53",
      "text": " \t[https://gyazo.com/ec8d7baedec8f153cf4f0c6ac62fb54a]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1669108469,
      "updated": 1669113580
    },
    {
      "id": "637c92f4aff09e0000ac7c54",
      "text": "\t上記の図はどちらも書いた人から発生した通知が読者に一方的に伝達される仕組み",
      "userId": "582e63d27c56960011aff09e",
      "created": 1669108469,
      "updated": 1669113566
    },
    {
      "id": "637ca713aff09e000046d481",
      "text": "\t振り返って考えてみると[トラックバック]とはブログサービスが「読者がリアクションを示すためのWebhook」を提供している状態なのだな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1669113620,
      "updated": 1669113689
    },
    {
      "id": "637ca6bcaff09e000046d47f",
      "text": "　\t[https://gyazo.com/5992102a9b61924dfcd793209563dc8d]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1669113532,
      "updated": 1669113690
    },
    {
      "id": "637c93a3aff09e0000ac7c55",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1669108643,
      "updated": 1669108643
    },
    {
      "id": "63782e6279e1130000c0c27e",
      "text": "",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668820578,
      "updated": 1668820661
    },
    {
      "id": "63782e8379e1130000c0c280",
      "text": "[nishio.icon]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668820611,
      "updated": 1668820613
    },
    {
      "id": "63781ca0aff09e00003160c4",
      "text": "\tScrapboxをActivityPub対応するためには具体的にはScrapboxの更新情報を(かつてのRSSみたいに)JSON形式でGETできるようにするサービスをVercelあたりに立てて、そのサービスがMastodon側でのリアクションの情報を受け取るAPIを提供すればいいのかな。リアクションはScrapbox側が書き込みAPIを持ってないからScrapboxに書き戻すのが面倒だし個人的にはその必要を感じないので僕に見せるビューだけそのサービス上に作ればいいのかな？？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668816033,
      "updated": 1668816133
    },
    {
      "id": "63781c9baff09e00003160c3",
      "text": "\t\tなおこれは規格も読まずに1枚の絵だけで適当なことを言ってます",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668816027,
      "updated": 1668816146
    },
    {
      "id": "637820e06eb406000090803c",
      "text": "\t\t送るだけなら手近なMastodonに投げるだけでも目的は達せそう[inajob.icon][blu3mo.icon]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668817120,
      "updated": 1668820568
    },
    {
      "id": "6378247faff09e0000d705a9",
      "text": "\t\t　送るだけならそうだから、フォローされたことや投稿にいいねやコメントがついたのを知りたいということかなと思った[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668818048,
      "updated": 1668818294
    },
    {
      "id": "637825ce6eb406000090803d",
      "text": "\t\t　 なるほど[inajob.icon]",
      "userId": "58442db3ee4a2400116eb406",
      "created": 1668818382,
      "updated": 1668818387
    },
    {
      "id": "637825e1aff09e0000d705aa",
      "text": "\t\t　 まあScrapbox側にそれを表示するのは書き込みAPIがないから…[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668818401,
      "updated": 1668818456
    },
    {
      "id": "637825f9aff09e0000d705ab",
      "text": "\t\t　  自分が見るだけならChrome拡張とかでいいのか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668818426,
      "updated": 1668818477
    },
    {
      "id": "63782e2779e1130000c0c27b",
      "text": " \t　Scrapbox等の一般的にSNSとされない物もActivityPubでMastodon等と並列な位置付けになったらおもろい、という気持ち[blu3mo.icon]",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668820519,
      "updated": 1668821215
    },
    {
      "id": "637830f279e1130000c0c283",
      "text": " \t　　やりたいことを実装するだけならmastodon bot作れば良さそう",
      "userId": "5d89b1f60230ae001779e113",
      "created": 1668821235,
      "updated": 1668821251
    },
    {
      "id": "637832acaff09e00002dc46b",
      "text": " \t　　むしろ「え？いま一番いけてるSNSってScrapboxじゃない？」とか言ってみたいw[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668821677,
      "updated": 1668821704
    },
    {
      "id": "63783309aff09e00002dc46d",
      "text": " \t　　　Scrapboxの更新をSNSに投げるだけでは「ScrapboxがSNSだ」とは言い難い",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668821770,
      "updated": 1668821807
    },
    {
      "id": "63783358aff09e00002dc46f",
      "text": " \t　　　Scrapboxの投稿に対して、その通知をFedibird上でみた人がコメントをつけて、それがChrome拡張か何かでScrapboxをみてる僕にScrapboxのサイドメニューとかで表示されたらScrapbox自体を「フェデレーションでFediverseの一員となったSNSだ」と主張できないかな",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668821848,
      "updated": 1668821954
    },
    {
      "id": "637833f5aff09e00002dc470",
      "text": " \t　　その手前の一歩としてmastodon botを作るとしても、投稿の単位をどうするのか考えなきゃだね、今のScrapboxのSlack通知みたいなのがそのまま流れてもイマイチな気がするので。",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668822005,
      "updated": 1668822071
    },
    {
      "id": "63783437aff09e00002dc471",
      "text": " \t　　　気にせず流すという手も？",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668822071,
      "updated": 1668822079
    },
    {
      "id": "63783440aff09e00002dc472",
      "text": " \t　　　パブリックScrapboxプロジェクトを持ってる人がみんなFediverseに自分のScrapboxの通知を流すと…",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668822081,
      "updated": 1668822125
    },
    {
      "id": "6378346daff09e00002dc473",
      "text": " \t　　　いや、騒がし過ぎて僕はフォローしなさそうだなw",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668822126,
      "updated": 1668822138
    },
    {
      "id": "637834ccaff09e00002dc474",
      "text": " \t　　例えば何らかの絵文字でスタートしてる行はツイート対象とみなし、15分に1回Scrapboxの過去15分の更新をクロールして、新着があれば行リンク付きでツイートする、とか",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668822220,
      "updated": 1668822313
    },
    {
      "id": "63781d12aff09e00003160c6",
      "text": "\t詳しい人による最小限の実装の解説っぽい",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668816147,
      "updated": 1668816159
    },
    {
      "id": "63781d1faff09e00003160c7",
      "text": "\t\t[https://gihyo.jp/dev/serial/01/perl-hackers-hub/005901 第59回 Fediverse入門―非中央集権型SNSサーバを作ろう！（1） | gihyo.jp]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668816160,
      "updated": 1668816179
    },
    {
      "id": "63781d32aff09e00003160c8",
      "text": "\t\t[HTTP Signatures]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668816179,
      "updated": 1668819507
    },
    {
      "id": "63782a34aff09e00003160c9",
      "text": "\t\t[リモートフォロー]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668819508,
      "updated": 1668819538
    },
    {
      "id": "63782a53aff09e00003160ca",
      "text": "\t\t ユーザー名からアクター情報URLへの変換",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668819539,
      "updated": 1668819582
    },
    {
      "id": "63782a7eaff09e00003160cb",
      "text": "\t\t 慣習的に[Web Host Metadata]と[WebFinger]によるやりとり",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668819582,
      "updated": 1668819603
    },
    {
      "id": "63782a92aff09e00003160cc",
      "text": "　　ローカルにフォロワーリストを持って、その各フォロワーのinboxに対してPOSTをする",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668819603,
      "updated": 1668819944
    },
    {
      "id": "63782be8aff09e0000d705ad",
      "text": "　　　inboxは他のサービスになり得るわけだ、なるほど",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668819945,
      "updated": 1668819970
    },
    {
      "id": "63782c8eaff09e0000d705af",
      "text": "　　　その柔軟性の代わりに「投稿頻度×フォロワー数」に応じたコストが掛かる",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668820110,
      "updated": 1668820141
    },
    {
      "id": "63782c3aaff09e0000d705ae",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1668820027,
      "updated": 1668820034
    },
    {
      "id": "63782b8caff09e0000d705ac",
      "text": "[yuyasurarin.icon]",
      "userId": "616ca537c25a92001e5f1e0d",
      "created": 1668819853,
      "updated": 1668831628
    },
    {
      "id": "6378598b5f1e0d000091904a",
      "text": " なんだかんだ [de facto standardから逃れる]といい[Web 3.0]に近づく方法も出てきたのかな、と感じる",
      "userId": "616ca537c25a92001e5f1e0d",
      "created": 1668831628,
      "updated": 1668831662
    },
    {
      "id": "637859af5f1e0d000091904c",
      "text": "  ",
      "userId": "616ca537c25a92001e5f1e0d",
      "created": 1668831664,
      "updated": 1668831674
    },
    {
      "id": "6378598c5f1e0d000091904b",
      "text": "",
      "userId": "616ca537c25a92001e5f1e0d",
      "created": 1668831629,
      "updated": 1668831629
    }
  ]
}