{
  "id": "67052069b6db0b001dada9ef",
  "title": "値渡しと参照渡し",
  "created": 1728389227,
  "updated": 1735936752,
  "lines": [
    {
      "id": "67052069b6db0b001dada9ef",
      "text": "値渡しと参照渡し",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1728389227,
      "updated": 1728389227
    },
    {
      "id": "6705206c71b3c200005bba49",
      "text": "[値渡し]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1728389227,
      "updated": 1728389231
    },
    {
      "id": "6705207271b3c200005bba4b",
      "text": "[参照渡し]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1728389233,
      "updated": 1728389235
    },
    {
      "id": "6705206d71b3c200005bba4a",
      "text": "",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1728389228,
      "updated": 1728389228
    },
    {
      "id": "6705209571b3c200005bba4c",
      "text": "どう使い分けるべきか？[bsahd.icon]",
      "userId": "661b6e882a96e9002371b3c2",
      "created": 1728389268,
      "updated": 1728389275
    },
    {
      "id": "6705209a71b3c200005bba4d",
      "text": "必要に応じて使い分けるので、参照わたしが必要な場合を羅列したらどう使うのかわかりそう[基素.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1728389273,
      "updated": 1728450142
    },
    {
      "id": "67061891aff09e000053ac38",
      "text": "前提として「値渡し」と「参照渡し」って言葉で何を言おうとしてるのかはっきりさせた方がいいと思う[nishio.icon]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1728452753,
      "updated": 1728452790
    },
    {
      "id": "670618b6aff09e000053ac39",
      "text": "\t[/nishio/参照の値渡し]",
      "userId": "582e63d27c56960011aff09e",
      "created": 1728452790,
      "updated": 1728453355
    },
    {
      "id": "670622481280f000002c0ae7",
      "text": "[yuta0801.icon]さんがJSの文脈で詳しく調べてた覚え[takker.icon]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1728455241,
      "updated": 1728455267
    },
    {
      "id": "670623031280f000002c0aed",
      "text": " [JavaScriptに参照渡し/値渡しなど存在しない #ポエム - Qiita https://qiita.com/yuta0801/items/f8690a6e129c594de5fb]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1728455428,
      "updated": 1728455431
    },
    {
      "id": "670623c71280f000002c0aee",
      "text": " (private)[/yuta0801/「javascriptに参照渡し/値渡しなど存在しない」]",
      "userId": "5ef2bdebb60650001e1280f0",
      "created": 1728455624,
      "updated": 1728455635
    },
    {
      "id": "67061aebaff09e000053ac3a",
      "text": "",
      "userId": "582e63d27c56960011aff09e",
      "created": 1728453356,
      "updated": 1728453356
    },
    {
      "id": "67060e22774b170000c60888",
      "text": "[Claude 3.5 Sonnet.icon]",
      "userId": "59fb21121207900012774b17",
      "created": 1728450082,
      "updated": 1728450288
    },
    {
      "id": "67060ef0774b170000c6088a",
      "text": "値渡しが必要なケース:",
      "userId": "59fb21121207900012774b17",
      "created": 1728450288,
      "updated": 1728450298
    },
    {
      "id": "67060ef2774b170000c6088c",
      "text": " - データの独立性を保証したい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6088d",
      "text": " - イミュータブルな操作を行いたい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6088e",
      "text": " - セキュリティ上の理由でデータの直接アクセスを防ぎたい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6088f",
      "text": " - 並行処理や並列処理で安全にデータを扱いたい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c60890",
      "text": " - 関数型プログラミングのパラダイムに従いたい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c60891",
      "text": " - デバッグやトレースを容易にしたい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c60892",
      "text": " - プリミティブ型のデータを扱う時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c60894",
      "text": "参照渡しが必要なケース:",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450296
    },
    {
      "id": "67060ef2774b170000c60896",
      "text": " - 大きなデータ構造を効率的に扱いたい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c60897",
      "text": " - 関数内で元のデータを直接修正したい時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c60898",
      "text": " - 複数の値を返す必要がある時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c60899",
      "text": " - コールバック関数を実装する時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "677849257838e30000661d14",
      "text": " 　これはよくある[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936290,
      "updated": 1735936299
    },
    {
      "id": "677849387838e30000661d15",
      "text": " 　　コールバック関数を通して関数（もしくはイベント）呼び出し元の変数を書き換えたい場面は往々にしてある[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936310,
      "updated": 1735936348
    },
    {
      "id": "67060ef2774b170000c6089a",
      "text": " - イテレータやジェネレータを実装する時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6089b",
      "text": " - オブジェクト指向プログラミングでのオブジェクト操作を行う時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6089c",
      "text": " - 再帰関数での深い階層のデータ操作を行う時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6089d",
      "text": " - インプレースでの配列やコレクションの操作を行う時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6089e",
      "text": " - 複数のオブジェクト間で状態を共有する時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c6089f",
      "text": " - データベース接続やファイルハンドルを管理する時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c608a0",
      "text": " - ビューやプロキシパターンを実装する時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c608a1",
      "text": " - マルチスレッド環境での共有リソースにアクセスする時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c608a2",
      "text": " - メモリマッピングファイルを操作する時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c608a3",
      "text": " - グラフィックスプログラミングで画像データを操作する時",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450291
    },
    {
      "id": "67060ef2774b170000c608a4",
      "text": " - 動的メモリ割り当てを最小限に抑えたい時​​​​​​​​​​​​​​​​",
      "userId": "59fb21121207900012774b17",
      "created": 1728450291,
      "updated": 1728450306
    },
    {
      "id": "67060ee9774b170000c60889",
      "text": "",
      "userId": "59fb21121207900012774b17",
      "created": 1728450286,
      "updated": 1728450286
    },
    {
      "id": "6778497a7838e30000661d16",
      "text": "[Mijinko_SD.icon]",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936375,
      "updated": 1735936379
    },
    {
      "id": "6778497e7838e30000661d18",
      "text": "　細かいことは[Claude 3.5 Sonnet.icon]氏が列挙してるけど",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936379,
      "updated": 1735936435
    },
    {
      "id": "677849b67838e30000661d19",
      "text": "　JavaScriptやPythonでは基本的に意識して使い分けるようなことは無くて、値が[ミュータブル]か[イミュータブル]かで使い分けるぐらいしかなさそう",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936435,
      "updated": 1735936505
    },
    {
      "id": "677849fb7838e30000661d1a",
      "text": "　　[ミュータブル]だけど代入先と代入元で独立させたい時は[ディープコピー]する",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936505,
      "updated": 1735936564
    },
    {
      "id": "67784a377838e30000661d1b",
      "text": "　そこで参照渡しの概念があるC++とかの話になってくるけれど",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936564,
      "updated": 1735936603
    },
    {
      "id": "67784a4f7838e30000661d1c",
      "text": "　　値を独立させる必要がない場合やメモリ消費量を抑えたい場合は参照渡し",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936589,
      "updated": 1735936658
    },
    {
      "id": "67784a957838e30000661d1d",
      "text": "　　それ以外は値渡しな気がする",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936658,
      "updated": 1735936676
    },
    {
      "id": "67784aa77838e30000661d1e",
      "text": "　　数値とか文字列とかは値を複製してもメモリ消費量はそこまで増えないので、（参照渡しをしたことによる不意のバグをさける為にも）値渡しでいいと思う",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936676,
      "updated": 1735936752
    },
    {
      "id": "6778497a7838e30000661d17",
      "text": "",
      "userId": "60fb0a79f3364000237838e3",
      "created": 1735936375,
      "updated": 1735936375
    }
  ]
}